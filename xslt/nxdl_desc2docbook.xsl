<?xml version="1.0" encoding="UTF-8"?>

<!--
########### SVN repository information ###################
# $Date$
# $Author$
# $Revision$
# $HeadURL$
# $Id$
########### SVN repository information ###################

Purpose:
	This stylesheet is used to extract the specifications of 
	valid types categories from the NeXus Definition Language
	specifications into DocBook content for use in NXDL.xml.

Usage:
    xsltproc ../xslt/nxdl_units2docbook.xsl ../nxdlTypes.xsd > types.xml
-->

<xslt:stylesheet
	xmlns:xslt="http://www.w3.org/1999/XSL/Transform"
	version="1.0"
	xmlns:nxdl="http://definition.nexusformat.org/nxdl/3.1"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    >
    <xslt:output method="xml" indent="yes" version="1.0" encoding="UTF-8"/>

    <xslt:template match="/">
        <!-- Needs this on 2nd line of XML file: 
            <?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
        -->
        <xslt:processing-instruction 
            name="oxygen">RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"</xslt:processing-instruction>
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        
        <xslt:comment>###########################################################</xslt:comment>
        <xslt:comment>######    This XML file was auto-generated from      ######</xslt:comment>
        <xslt:comment>######    an NXDL file by an XSLT transformation.    ######</xslt:comment>
        <xslt:comment>######    Do NOT edit this DocBook XML file.         ######</xslt:comment>
        <xslt:comment>###########################################################</xslt:comment>
        
        <xslt:comment>There has been no effort to make this file easy to read for humans.</xslt:comment>
        
        <xslt:comment/><!-- tricks XSLT to start a new line -->
        
        <xslt:comment>
# NeXus - Neutron and X-ray Common Data Format
# 
# Copyright (C) 2008-2010 NeXus International Advisory Committee (NIAC)
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# For further information, see http://www.nexusformat.org
        </xslt:comment>
        
        <xslt:comment/><!-- tricks XSLT to start a new line -->


        <xslt:element name="section">
            <xslt:attribute name="xmlns">http://docbook.org/ns/docbook</xslt:attribute>
            <xslt:comment> auto-generated by a script </xslt:comment>
            <title>NXDL Elements and Data Types</title>
            <para>
                The documentation in this section has been obtained directly 
                from the <code>nxdl.xsd</code> NXDL Schema.
                First, the basic elements are defined in alphabetical order.  
                Then, the common data types are defined.
            </para>
            
            <section>
                <title>NXDL element: <code>attribute</code> </title>
                <para>
                    The components of the <code>attribute</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>attribute</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">attribute</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='attributeType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>

            <section>
                <title>NXDL element: <code>definition</code> </title>
                <para>
                    The components of the <code>definition</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>definition</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">definition</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:element[@name='definition']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='definitionType']" />
                <!-- TODO need to document a 'restriction' -->
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='definitionTypeAttr']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>
            
            <section>
                <title>NXDL element: <code>dims</code> </title>
                <para>
                    The components of the <code>dims</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>dims</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">dims</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='dimsType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <section>
                    <title>attributes of <code>dims</code></title>
                    <xslt:comment/><!-- tricks XSLT to start a new line -->
                    <xslt:apply-templates 
                        select="/xsd:schema//xsd:complexType[@name='dimsType']/xsd:sequence/xsd:element[@name='dim']/xsd:complexType//xsd:attribute" />
                    <xslt:comment/><!-- tricks XSLT to start a new line -->
                </section>
            </section>
            
            <section>
                <title>NXDL element: <code>doc</code> </title>
                <para>
                    The components of the <code>doc</code>element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>doc</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">doc</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='docType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <section>
                    <title>element: <emphasis>any</emphasis></title>
                    <para>
                        In documentation with DocBook markup tags, it may be useful to
                        use an element that is not directly specified by the NXDL language. 
                        The <emphasis>any</emphasis> element here says that one can use any element
                        at all in a <code>doc</code> element and NXDL will not process it but pass it through.
                    </para>
                </section>
            </section>
            
            <section>
                <title>NXDL element: <code>enumeration</code></title>
                <para>
                    The components of the <code>enumeration</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>enumeration</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">enumeration</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='enumerationType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>
            
            <section>
                <title>NXDL element: <code>field</code></title>
                <para>
                    The components of the <code>field</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>field</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">field</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='fieldType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates 
                    select="/xsd:schema//xsd:complexType[@name='fieldType']/xsd:complexContent/xsd:extension//xsd:attribute" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates 
                    select="/xsd:schema//xsd:complexType[@name='fieldType']/xsd:complexContent/xsd:extension/xsd:sequence//xsd:element" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>
            
            <section>
                <title>NXDL element: <code>group</code></title>
                <para>
                    The components of the <code>group</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>group</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">group</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='groupType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:group" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>
            
            <section>
                <title>NXDL element: <code>link</code></title>
                <para>
                    The components of a <code>link</code> element are described here.
                    <indexterm>
                        <primary>NXDL</primary>
                        <secondary>element</secondary>
                        <tertiary>link</tertiary>
                    </indexterm>
                    <xslt:call-template name="elementDiagram">
                        <xslt:with-param name="short">link</xslt:with-param>
                    </xslt:call-template>
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='linkType']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
            </section>
            
            <section>
                <title>Common internal data types that define the NXDL language</title>
                <para>
                    Data types that define the NXDL language are described here.
                    These data types are defined in the XSD Schema (<code>nxdl.xsd</code>)
                    and are used in various parts of the Schema to define common structures
                    or to simplify a complicated entry.  While the data types are not intended for
                    use in NXDL specifications, they define structures that may be used in NXDL specifications. 
                </para>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:complexType[@name='basicComponent']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validItemName']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validNXClassName']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='validTargetName']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <xslt:apply-templates select="/xsd:schema//xsd:simpleType[@name='nonNegativeUnbounded']" />
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <section>
                    <title>The <code>xs:string</code> data type</title>
                    <para>
                        The <code>xs:string</code> data type can contain characters, 
                        line feeds, carriage returns, and tab characters.
                        See <uri>http://www.w3schools.com/Schema/schema_dtypes_string.asp</uri> 
                        for more details.
                    </para>
                </section>
                <xslt:comment/><!-- tricks XSLT to start a new line -->
                <section>
                    <title>The <code>xs:token</code> data type</title>
                    <para>
                        The <code>xs:string</code> data type is derived from the 
                        <code>xs:string</code> data type.
                    </para>
                    <para>
                        The <code>xs:token</code> data type also contains characters, 
                        but the XML processor will remove line feeds, carriage returns, tabs, 
                        leading and trailing spaces, and multiple spaces.
                        See <uri>http://www.w3schools.com/Schema/schema_dtypes_string.asp</uri> 
                        for more details.
                    </para>
                </section>
                <xslt:comment/><!-- tricks XSLT to start a new line -->

            </section>
        </xslt:element>

    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:complexType|xsd:simpleType|xsd:group|xsd:element|xsd:attribute">
        <xslt:if test="count(@name)">
            <section><!-- TODO too many subsections -->
                <title>
                    <xslt:if test="name()='xs:attribute'">@</xslt:if
                    ><code><xslt:value-of select="@name"/></code>
                    <xslt:choose>
                        <xslt:when test="name()='xs:complexType'"> data type</xslt:when>
                        <xslt:when test="name()='xs:simpleType'"> data type</xslt:when>
                    </xslt:choose>
                </title>
                <para>
                    <xslt:apply-templates select="xsd:annotation/xsd:documentation"/>
                </para>
                <xslt:apply-templates select="xsd:sequence//xsd:element"/>
                <xslt:apply-templates select="xsd:simpleType"/>
                <xslt:apply-templates select="xsd:complexType"/>
                <xslt:apply-templates select="xsd:restriction"/>
                <xslt:apply-templates select="xsd:attribute"/>
            </section>
        </xslt:if>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:restriction">
        <para>
            The value may be any
            <xslt:choose>
                <xslt:when test="count(xsd:pattern)">
                    <code><xslt:value-of select="@base"/></code>
                    that <emphasis>also</emphasis> matches the regular expression:
                    <programlisting language="c"><code><xslt:value-of select="xsd:pattern/@value"/></code></programlisting>
                </xslt:when>
                <xslt:when test="count(xsd:pattern)">
                    <code><xslt:value-of select="@base"/></code>
                    from this list:
    				<itemizedlist>
    				    <xslt:apply-templates select="xsd:enumeration"/>
    				</itemizedlist>
                </xslt:when>
                <xslt:otherwise>
                    <code><xslt:value-of select="@base"/></code>.
                </xslt:otherwise>
            </xslt:choose>
        </para>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:enumeration">
        <listitem><para><code><xslt:value-of select="@value"/></code></para></listitem>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template name="elementDiagram" mode="typePlot">
        <xslt:param name="short"/>
        <xslt:if test="count($short)">
            <xslt:element name="figure">
              <xslt:attribute name="xml:id">
                  fig.nxdl.<xslt:value-of select="$short"/>
              </xslt:attribute>
              <title>
                  Graphical representation of the NXDL 
                  <code><xslt:value-of select="$short"/></code> 
                  element
              </title>
              <mediaobject>
                  <imageobject>
                      <xslt:element name="imagedata">
                          <xslt:attribute name="fileref"
                              >img/nxdl/nxdl_<xslt:value-of select="$short"
                              />.jpg</xslt:attribute>
                          <xslt:attribute name="width">200pt</xslt:attribute>
                          <xslt:attribute name="scalefit">1</xslt:attribute>
                      </xslt:element>
                  </imageobject>
              </mediaobject>
            </xslt:element>
        </xslt:if>
    </xslt:template>
    
    <!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
    
    <xslt:template match="xsd:documentation">
        <!--<xsl:value-of select="."/>-->
        <!-- xmlns:db="http://docbook.org/ns/docbook" -->
        <xslt:apply-templates />
    </xslt:template>
    
    <!-- default rule: copy any node beneath <nx:doc> -->
    <!-- thanks to: http://stackoverflow.com/questions/1525285/xslt-mixed-content-node -->
    <xslt:template match="xsd:documentation//*">
        <xslt:copy>
            <xslt:copy-of select="@*" />
            <xslt:apply-templates />
        </xslt:copy>
    </xslt:template>

</xslt:stylesheet>
