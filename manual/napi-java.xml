<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<section 
    version="5.0"
    xml:id="NAPI-java" 
	xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Java Interface</title>
    <!-- http://www.nexusformat.org/Java_API -->
    
    <indexterm significance="preferred">
        <primary>NAPI</primary>
        <secondary>java</secondary>
    </indexterm>
        <para>
            This section includes installation notes, 
            instructions for running NeXus for Java programs and a brief 
            introduction to the API.
        </para>
            <para>
                The Java API 
                for NeXus (<code>jnexus</code>) was implemented through the 
                Java Native Interface (JNI) to call on to the native C library. 
		This has a number of disadvantages over using pure Java, however 
		the most popular file backend HDF5 is only available using 
		a JNI wrapper anyway.
            </para>
        
        <section xml:id="NAPI-java-general-acknow">
            <title>Acknowledgement</title>
            <para>
                This implementation uses classes and native methods from NCSA's 
                Java HDF Interface project. Basically all conversions from native 
                types to Java types is done through code from the NCSA HDF group. 
                Without this code the implementation of this API would have taken 
                much longer. See NCSA's copyright for more information.
            </para>
        </section>

        <section xml:id="NAPI-java-general-install">
            <title>Installation</title>
            <para/>
            
            <section xml:id="NAPI-java-general-install-Requirements">
                <title>Requirements</title>
                <para>
                    <caution><para>Documentation is old and may need revision.</para></caution>
                    For running an application with <code>jnexus</code> an recent Java runtime environment (JRE) will do.
                </para>
                <para>
                    In order to compile the Java API for NeXus a Java Development Kit is required on top of the 
			build requirements for the C API.
                </para>
            </section>
            
            <section xml:id="NAPI-java-general-install-win32">
                <title>Installation under Windows</title>
                <para>
                    <orderedlist>
                        <listitem>
                            <para>
                                Copy the HDF DLL's and the file 
                                <code>jnexus.dll</code> to a directory in your path. 
                                For instance <code>C:\Windows\system32</code>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Copy the <code>jnexus.jar</code> to the place where 
                                you usually keep library jar files. 
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
            </section>
            
            <section xml:id="NAPI-java-general-install-unix">
                <title>Installation under Unix</title>
                <para>
                    The <code>jnexus.so</code> shared library as well as all required file backend
                    <code>.so</code> libraries are required as well as the <code>jnexus.jar</code> 
                    file holding the required Java classes. Copy them wherever you like 
                    and see below for instructions how to run programs using <code>jnexus</code>.
                </para>
            </section>
        </section>
        
        <section xml:id="NAPI-java-general-Running">
            <title>Running Programs with the NeXus API for Java</title>
            <para>
                In order to successfully run a program with 
                <code>jnexus</code>, the Java runtime systems needs 
                to locate two items:
                <orderedlist>
                    <listitem><para>The shared library implementing the native methods.</para></listitem>
                    <listitem><para>The <code>nexus.jar</code> file in order to find the Java classes.</para></listitem>
                </orderedlist>
            </para>
            
            <section xml:id="NAPI-java-general-Running-shared">
                <title>Locating the shared libraries</title>
                <para>
                    The methods for locating a shared library differ 
                    between systems. Under Windows32 systems the best method 
                    is to copy the <code>jnexus.dll</code> and the HDF4, HDF5 and/or XML-library 
                    DLL files into a directory in your path. 
                </para>
                <para>
                    On a UNIX system, the problem can be solved in three different ways:
                    <orderedlist>
                        <listitem>
                            <para>
                                Make your system administrator copy the <code>jnexus.so</code> 
                                file into the systems default shared library directory 
                                (usually <code>/usr/lib</code> or <code>/usr/local/lib</code>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Put the <code>jnexus.so</code> file wherever you see fit and 
                                set the <code>LD_LIBRARY_PATH</code> environment variable to 
                                point to the directory of your choice.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Specify the full pathname of the jnexus shared library on 
                                the java command line with the 
                                <code>-Dorg.nexusformat.JNEXUSLIB=full-path-2-shared-library</code> 
                                option. 
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
            </section>
            
            <section xml:id="NAPI-java-general-Running-jnexus">
                <title>Locating <code>jnexus.jar</code></title>
                <para>
                    This is easier, just add the the full pathname to 
                    <code>jnexus.jar</code> to the classpath when starting java.
                    Here are examples for a UNIX shell and the Windows shell.
                    <example>
                        <title>UNIX example shell script to start <code>jnexus.jar</code></title>
                        <programlisting language="c" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-jnexus.sh" parse="text"
                        /></programlisting>
                    </example>
                    <example>
                        <title>Windows 32 example batch file to start <code>jnexus.jar</code></title>
                        <programlisting language="c" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-jnexus.bat" parse="text"
                        /></programlisting>
                    </example>
                </para>
            </section>
        </section>
            
        <section xml:id="NAPI-java-general-Programming">
            <title>Programming with the NeXus API for Java</title>
            <para>
                The NeXus C-API is good enough but for Java a few adaptions of 
                the API have been made in order to match the API better to the 
                idioms used by Java programmers. In order to understand the 
                Java-API, it is useful to study the NeXus C-API because many 
                methods work in the same way as their C equivalents. 
                A full API documentation is available in Java documentation format. 
                For full reference look especially at:
                <itemizedlist>
                    <listitem>
                        <para>
                            The interface <code>NeXusFileInterface</code> first. 
                            It gives an uncluttered view of the API.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The implementation <code>NexusFile</code> which gives more details about constructors and 
                            constants. However this documentation is interspersed with information about 
                            native methods which should not be called by an application programmer as they 
                            are not part of the standard and might change in future.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
               <para>
                   See the following code example for opening a file, 
                   opening a vGroup and closing the file again in order 
                   to get a feeling for the API:
                   <example>
                       <title>fragment for opening and closing</title>
                       <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-prog1.java" parse="text"
                        /></programlisting>
                   </example>
                   Some notes on this little example:
                   <itemizedlist>
                       <listitem>
                           <para>
                               Each NeXus file is represented by a <code>NexusFile</code> object which 
                               is created through the constructor.
                           </para>
                       </listitem>
                       <listitem>
                           <para>
                               The <code>NexusFile</code> object takes care of all file handles for you. 
                               So there is no need to pass in a handle anymore to each 
                               method as in the C language API.
                           </para>
                       </listitem>
                       <listitem>
                           <para>
                               All error handling is done through the Java exception 
                               handling mechanism. This saves all the code checking 
                               return values in the C language API. Most API functions 
                               return void.
                           </para>
                       </listitem>
                       <listitem>
                           <para>
                               Closing files is tricky. The Java garbage collector is 
                               supposed to call the finalize method for each object it 
                               decides to delete. In order to enable this mechanism, 
                               the <code>NXclose()</code> function was replaced by 
                               the <code>finalize()</code> method. In practice it seems 
                               not to be guaranteed that the garbage collector calls the 
                               <code>finalize()</code> method. It is safer to call 
                               <code>finalize()</code> yourself in order to properly 
                               close a file. Multiple calls to the <code>finalize()</code> 
                               method for the same object are safe and do no harm.
                           </para>
                       </listitem>
                   </itemizedlist>
               </para>
        </section>
        
        <section xml:id="NAPI-java-general-datarw">
            <title>Data Writing and Reading</title>
            <para>
                Again a code sample which shows how this looks like:
                <example>
                    <title>fragment for writing and reading</title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-datarw1.java" parse="text"
                        /></programlisting>
                </example>
                The dataset is created as usual with <code>makedata()</code> and opened 
                with <code>putdata()</code>. The trick is in <code>putdata()</code>.
                Java is meant to be type safe. One would think then that a 
                <code>putdata()</code> method would be required for each Java data type. 
                In order to avoid this, the data to <code>write()</code> is passed into 
                <code>putdata()</code> as type <code>Object</code>. 
                Then the API proceeds to analyze this object through the 
                Java introspection API and convert the data to a byte stream for writing 
                through the native method call. This is an elegant solution with one drawback:
                An array is needed at all times. Even if only a single data value is 
                written (or read) an array of length one and an appropriate type 
                is the required argument.
            </para>
            <para>
                Another issue are strings. Strings are first class objects in Java.
                HDF (and NeXus) sees them as dumb arrays of bytes. Thus strings have to be 
                converted to and from bytes when reading string data. See a writing example:
                <example>
                    <title>String writing</title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-datarw2.java" parse="text"
                        /></programlisting>
                </example>
                And reading:
                <example>
                    <title>String reading</title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-datarw2.java" parse="text"
                        /></programlisting>
                </example>
                The aforementioned holds for all strings written as SDS content or as an 
                attribute. SDS or vGroup names do not need this treatment.
            </para>
        </section>
        
        <section xml:id="NAPI-java-general-datarw-inquiry">
            <title>Inquiry Routines</title>
            <para>
                Let us compare the C-API and Java-API signatures of the 
                <code>getinfo()</code> routine (C) or method (Java):
                <example>
                    <title>C API signature of <code>getinfo()</code></title>
                    <programlisting language="c" linenumbering="numbered"
                        ><xi:include href="examples/frag-c-api-sig-getinfo.c" parse="text"
                        /></programlisting>
                </example>
                <example>
                    <title>Java API signature of <code>getinfo()</code></title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/frag-c-api-sig-getinfo.java" parse="text"
                        /></programlisting>
                </example>
                The problem is that Java passes arguments only by value, which means they cannot 
                be modified by the method. Only array arguments can be modified. 
                Thus <code>args</code> in the <code>getinfo()</code> method holds the 
                rank and datatype information passed in separate items in the C-API version. 
                For resolving which one is which, consult a debugger or the API-reference.
            </para>
            <para>
                The attribute and vGroup search routines have been simplified 
                using Hashtables. The <code>Hashtable</code> returned by <code>groupdir()</code> 
                holds the name of the item as a key and the classname or the string SDS as the 
                stored object for the key. Thus the code for a vGroup search looks like this:
                <example>
                    <title>vGroup search</title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-inquiry1.java" parse="text"
                        /></programlisting>
                </example>
            </para>
            <para>
                For an attribute search both at global or SDS level the returned Hashtable 
                will hold the name as the key and a little class holding the type and size 
                information as value. Thus an attribute search looks like this in the Java-API:
                <example>
                    <title>attribute search</title>
                    <programlisting language="java" linenumbering="numbered"
                        ><xi:include href="examples/napi-java-inquiry2.java" parse="text"
                        /></programlisting>
                </example>
            </para>
            <para>
                For more information about the usage of the API routines see the reference
                or the NeXus C-API reference pages. Another good source of information is 
                the source code of the test program which exercises each API routine.
            </para>
        </section>
        
        <section xml:id="NAPI-java-general-knownproblems">
            <title>Known Problems</title>
            <para>
                These are a couple of known problems which you might run into:
                <glosslist>
                    <glossentry>
                        <glossterm>Memory</glossterm>
                        <glossdef>
                            <para>
                                As the Java API for NeXus has to convert between native 
                                and Java number types a copy of the data must be made 
                                in the process. This means that if you want to read or 
                                write 200MB of data your memory requirement will be 400MB! 
                                This can be reduced by using multiple
                                <code>getslab()</code>/<code>putslab()</code> to perform data 
				transfers in smaller chunks.
                            </para>
                        </glossdef>
                    </glossentry>
                    <glossentry>
                        <glossterm><code>Java.lang.OutOfMemoryException</code></glossterm>
                        <glossdef>
                            <para>
                                By default the Java runtime has a low default value for 
                                the maximum amount of memory it will use.
                                This ceiling can be increased through the <code>-mxXXm</code> 
                                option to the Java runtime. An example: 
                                <code>java -mx512m ...</code> starts the Java runtime 
                                with a memory ceiling of 512MB. 
                            </para>
                        </glossdef>
                    </glossentry>
                    <glossentry>
                        <glossterm>Maximum 8192 files open</glossterm>
                        <glossdef>
                            <para>
                                The NeXus API for Java has a fixed buffer for file 
                                handles which allows only 8192 NeXus files to be 
                                open at the same time. If you ever hit this limit, 
                                increase the <code>MAXHANDLE</code> define in 
                                <code>native/handle.h</code> and recompile everything. 
                            </para>
                        </glossdef>
                    </glossentry>
                </glosslist>
            </para>
        </section>
    
    <section xml:id="NAPI-java-online">
        <title>On-line Documentation</title>
        <para>
            The following documentation is browsable online:
            <orderedlist>
                <listitem>
                    <para>
                        The Doxygen API documentation<footnote><para><link 
                            xlink:href="http://download.nexusformat.org/doxygen/html-java/"
                            ><literal
                                >http://download.nexusformat.org/doxygen/html-java/</literal
                            ></link></para></footnote>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        A verbose tutorial for the NeXus for Java API.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The API Reference.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Finally, the source code for the test driver for the API 
                        which also serves as a documented usage example.
                    </para>
                </listitem>
            </orderedlist>
        </para>
    </section>
</section>
