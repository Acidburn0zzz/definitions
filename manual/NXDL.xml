<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="NeXusDefinitionLanguageChapter">
    <title>The NeXus Definition Language</title>
    <indexterm significance="preferred">
        <primary>NXDL</primary>
    </indexterm>
    <section>
        <!--
            TODO
    		Note the comments in Trac ticket #65
    		http://trac.nexusformat.org/definitions/ticket/65
    		Put them either here or in the ClassDefinitions.xml part
        -->
        <title>comments from Trac ticket #65</title>
        <orderedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Application definitions</emphasis> will override the
                    standard definition of (the base class) <literal>NXentry</literal> and provide
                    fields and groups that <emphasis role="italic">must</emphasis> be present in a
                    NeXus data file. Other fields or groups from <literal>NXentry</literal> (or
                    other base classes) are optional, as usual. </para>
            </listitem>
            <listitem>
                <para> Some mechanism needs to exist within the <literal>NXroot</literal> base class
                    to identify the use of an application definition to use instead of the standard
                        <literal>NXentry</literal>. </para>
                <para> One suggestion is to add an optional <literal>NXDL</literal> attribute to the
                        <literal>NXentry</literal> group entry where the value of the attribute is
                    the name of the application definition. This preserves Mark Koennecke's
                    suggestion: <quote> [The reference to the defining NXDL] needs to be at a
                        standard place across all files and it needs to live below
                            <literal>NXentry</literal> as a NeXus file may contain different entries
                        adhering to different definitions. </quote> For example: <example>
                        <title>suggestion to identify the use of an application definition</title>
                        <programlisting language="xml" linenumbering="numbered"
                            ><xi:include href="examples/nxdl-trac6-ex1.xml.txt" parse="text"
                            /></programlisting>
                    </example>
                </para>
                <para> In a followup, Freddie Akeroyd said: <quote> With regard to [this point],
                        isn't this already covered by the <emphasis role="bold"
                            >definition</emphasis> field in the <literal>NXentry</literal>? </quote>
                </para>
                <para>
                    <quote> I think there may be an option to use <literal>xsi:type</literal> at the
                            <literal>NXentry</literal> level to asist with schema validation of the
                        NXDL translated files ... I've been updating the
                            <literal>definition</literal> option of <literal>nxconvert</literal> to
                        add such an attribute so we would have [something like the next example] to
                        validate against a schema. If <literal>NXmonopd</literal> is inherited from
                            <literal>NXentry</literal>, then <literal>xsi:type</literal> will tell
                        the schema validation process to use <literal>NXmonopd</literal> rather than
                            <literal>NXentry</literal> when it is run. </quote>
                    <example>
                        <title>use of xsi:type to reference a defining NXmonopd</title>
                        <programlisting language="xml" linenumbering="numbered"
                            ><xi:include href="examples/nxdl-trac6-ex2.xml.txt" parse="text"
                            /></programlisting>
                    </example>
                </para>
                <para>
                    Pete added this comment:
                    <itemizedlist>
                        <listitem>
                            <para>keywords  NXDL validation Schema NXentry added</para>
                            <itemizedlist>
                                <listitem><para>NXentry has a definition field that specifies the NXDL to be used.</para></listitem>
                                <listitem>
                                    <para>For validation of any NeXus data file, consider this transformation scenario:</para>
                                    <itemizedlist>
                                        <listitem><para>(Advance step) Prepare XML Schema files from NXDL</para></listitem>
                                        <listitem><para>(Advance step) Collect all XML Schema files into a master XML Schema</para></listitem>
                                        <listitem><para>For HDF data, extract most content (except for data) to NeXus XML data file format</para></listitem>
                                        <listitem><para>Transform XML data file to XML data validation file format (this is not done yet)</para></listitem>
                                        <listitem><para>Validate XML data validation file against XML Schema</para></listitem>
                                    </itemizedlist>
                                </listitem>
                                <listitem><para>Optional fields or groups are used in an application definition to declare nomenclature</para></listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                </para>
            </listitem>
            <listitem>
                <para> An application definition shall contain the <emphasis role="bold">minimum set
                        of information necessary to do common processing like data
                        analysis.</emphasis>
                    <simplelist>
                        <member>This also means that there is no space in the application definition
                            for optional fields.</member>
                        <member>But of course, in a real NeXus data file the user is always
                            permitted to add additional fields from the base classes.</member>
                    </simplelist>
                </para>
            </listitem>
            <listitem>
                <para> The original NeXus view was that a base class was just a dictionary of
                    allowable terms (hence everything optional) and a definition said which base
                    class terms were mandatory (with those not specified being treated as optional).
                    Thus a definition did not need to add optional items as this was covered by the
                    base class. </para>
            </listitem>
            <listitem>
                <para> Perhaps this was never written down, but may have been an implication that a
                    definition could not mark a field as mandatory if it was not already listed in
                    some base class as optional. </para>
            </listitem>
            <listitem>
                <para> A base class has a wide range of terms, some of which would make more sense
                    in a particular instrument/application definition than others. Thus, there is
                    some merit from the documentation point of view in having some optional items in
                    a definition as <emphasis role="italic">things you might want to consider
                    adding</emphasis> or even the specification of the name if that optional 
                    term is to be used.
                </para>
            </listitem>
        </orderedlist>
    </section>
    <section>
        <title>short comment to MAHID group on 2010-01-26</title>
        <para> "NeXus Application Definition" is meant to describe NXDL specifications for
            scientific techniques and instrument definitions. </para>
        <para> Class definitions in NeXus prior to 2008 had been in the form of base classes and
            instrument definitions. All of these were in the same category. As the development of
            NeXus had been led mostly by scientists from neutron sources, this represented their
            typical situations. </para>
        <para> Both those new to NeXus and also those familiar saw the previous emphasis on
            instrument definitions as a deficiency that limited flexibility and possibly usage. The
            point was made that NeXus should attempt to better describe reduced data and also data
            for analysis since synchrotron instruments are rarely adhering to a fixed definition. </para>
        <para> The design of NeXus is moving towards an object-oriented approach where the base
            classes will be the objects and the "application definitions" will use the objects to
            specify the required components as fits some application. Here, "application" is very
            loosely defined to include: <simplelist>
                <member> specification of a scientific instrument (example: TOF-USANS at SNS) </member>
                <member> specification of what is expected for a scientific technique (example:
                    small-angle scattering data for common analysis programs) </member>
                <member> specification of generic data acquisition stream (example: TOFRAW - raw
                    time-of-flight data from a pulsed neutron source) </member>
                <member> specification of input or output of a specific software program </member>
            </simplelist> The term "the sky is the limit" seems to apply. The point of the "NeXus
            Application Definition" is that all of these start with "NX" and all have been approved
            by the NIAC. </para>
        <para> Those NXDL specifications not yet approved by the NIAC fall into the category of
            "NeXus contributed definitions" for which NeXus has a place in the repository. At
            present, this place is empty. Think of this category as place to put an NXDL (a
            candidate for a base class or application definition) for the NIAC to consider
            approving. </para>
    </section>
    <section>
        <title>Description of the NeXus Definition Language</title>
        <para> The intent of the NeXus Definition Language (NXDL) <indexterm
                significance="preferred">
                <primary>NeXus Definition Language</primary>
                <see>NXDL</see>
            </indexterm>
            <indexterm>
                <primary>NXDL</primary>
            </indexterm> is to provide an easier, and rules-based method for defining a NeXus data
            file that is specific to either an instrument (where NeXus has been for years) or an
            area of scientific technique or analysis. </para>
        <para>NeXus wiki page: <link xlink:href="http://www.nexusformat.org/NXDL">NXDL</link><footnote>
                <para><link xlink:href="http://www.nexusformat.org/NXDL"
                        >http://www.nexusformat.org/NXDL</link></para>
            </footnote></para>
        <para> NXDL is the new NeXus definition language - it will replace the <link
                xlink:href="http://www.nexusformat.org/Metaformat">Meta-DTD format</link><footnote>
                <para><link xlink:href="http://www.nexusformat.org/Metaformat"
                        >http://www.nexusformat.org/Metaformat</link></para>
            </footnote> as the way for specifying the content of NeXus data files. NXDL is based on
            XML schema technology and follows on from provisional work on NeXus schema <link
                xlink:href="http://www.nexusformat.org/Schema">NeXus schema</link><footnote>
                <para><link xlink:href="http://www.nexusformat.org/Schema"
                        >http://www.nexusformat.org/Schema</link></para>
            </footnote> in Summer 2008. </para>
        <para> At <link xlink:href="http://www.nexusformat.org/images/b/b2/NIAC2008_minutes.pdf"
                >NIAC 2008</link>,<footnote>
                <para><link xlink:href="http://www.nexusformat.org/images/b/b2/NIAC2008_minutes.pdf"
                        >http://www.nexusformat.org/images/b/b2/NIAC2008_minutes.pdf</link></para>
            </footnote> it was agreed that writing definitions directly as schema would probably be
            too verbose and instead a new language (NXDL) was devised that would then be translated
            into XML schema for eventual validation. The files written in the NXDL language are XML
            files in their own right and have an associated XML schema - this means a schema-aware
            XML editor can be used and accurate definition creation is much easier than it was with
            the old Meta-DTD. </para>
        <para> For the latest NXDL definitions see the <link
                xlink:href="https://svn.nexusformat.org/definitions/trunk">svn repository</link>.<footnote>
                <para><link xlink:href="https://svn.nexusformat.org/definitions/trunk"
                        >https://svn.nexusformat.org/definitions/trunk</link></para>
            </footnote>
        </para>
        <para> An NXDL description will be a true (not pseudo) XML file which structure can be
            validated by a schema. See below for a draft example from the working repository. Since
            the NXDL specification is not complete, expect that some aspects of this example might
            change. NXDL is not intended to change the location of information stored in existing
            NeXus files, only to change (and simplify) the way the file would be arranged for a
            specific instance such as instrument or technique. </para>
        <para> There are several different elements used in the NXDL. These are: </para>
        <table orient="port" role="small">
            <title> Tabular representation of NXuser[definition]</title>
            <tgroup cols="2">
                <colspec colwidth="15*"/>
                <colspec colwidth="30*"/>
                <thead>
                    <row>
                        <entry><?dblatex bgcolor="[gray]{0.8}"?>Name and Attributes (Type)</entry>
                        <entry><?dblatex bgcolor="[gray]{0.8}"?>Description (and
                            Occurrences)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>definition</literal> (XML root element)</entry>
                        <entry> Root element of an NXDL specification. This is the basic definition
                            of a new type. Components must derive from an existing type and
                            optionally provide documentation. </entry>
                    </row>
                    <row>
                        <entry><literal> @name</literal> (<literal/>)</entry>
                        <entry>required </entry>
                    </row>
                    <row>
                        <entry><literal> @type</literal>
                            (<literal>nx:definitionTypeAttr</literal>)</entry>
                        <entry>required </entry>
                    </row>
                    <row>
                        <entry><literal> @extends</literal> (<literal/>)</entry>
                        <entry>optional </entry>
                    </row>
                    <row>
                        <entry><literal> @restricts</literal> (<literal/>)</entry>
                        <entry>optional </entry>
                    </row>
                    <row>
                        <entry><literal> @svnid</literal> (<literal/>)</entry>
                        <entry>optional </entry>
                    </row>
                    <row>
                        <entry><literal>group</literal></entry>
                        <entry> A group element refers to the definition of an existing NX object:
                            either a base class (such as <literal>NXdata</literal> or
                                <literal>NXgeometry</literal>), application definition, contributed
                            definition, or a locally-defined component. </entry>
                    </row>
                    <row>
                        <entry><literal>field</literal></entry>
                        <entry> A field declares a new element in the component being
                            defined.</entry>
                    </row>
                    <row>
                        <entry><literal>doc</literal></entry>
                        <entry> Items can be documented (but this documentation is not printed in
                            the manual. It only appears in the NXDL file.) </entry>
                    </row>
                    <row>
                        <entry><literal>link</literal></entry>
                        <entry>A link to another item.</entry>
                    </row>
                    <row>
                        <entry><literal>attribute</literal></entry>
                        <entry>attribute of <literal>field</literal></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <!-- TODO: make a better description of the NXDL and how to use it -->
        <!-- TODO: describe and make tables of the stuff in nxdlTypes.xsd -->
        <note>
            <para> An application definition specifies the <emphasis>minimum set</emphasis> of data
                information (both data and metadata) for data analysis software. </para>
        </note>
        <simplesect>
            <title><literal>NXxrot.nxdl.xml</literal>: example NXDL specification</title>
            <programlisting language="xml" linenumbering="numbered"><xi:include href="../applications/NXxrot.nxdl.xml" parse="text"/></programlisting>
        </simplesect>
        <simplesect>
            <title><literal>nxdl.xsd</literal> source code</title>
            <programlisting language="xml" linenumbering="numbered"><xi:include href="../nxdl.xsd" parse="text"/></programlisting>
        </simplesect>
        <simplesect>
            <title>Data Types allowed in NXDL specification</title>
            <!-- what about pulling this from nxdlTypes.xsd using an XSLT? -->
            <para> </para>
        </simplesect>
        <simplesect>
            <title>Unit Types allowed in NXDL specification</title>
            <para> any string at all: should be valid units </para>
            <para>
                <!-- what about pulling this from nxdlTypes.xsd using an XSLT? -->
                <glosslist>
                    <glossentry><glossterm>NX_ANGLE</glossterm><glossdef><para>example: degrees or radians or arcminutes or </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_ANY</glossterm><glossdef><para>usage: things like logs that aren't picky on units </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_AREA</glossterm><glossdef><para>example: m2 or barns </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_CROSS_SECTION</glossterm><glossdef><para>example: barns </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_CURRENT</glossterm><glossdef><para>example: A </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_DIMENSIONLESS</glossterm><glossdef><para>for fields where the units cancel out, example: "" or mm/mm </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_ENERGY</glossterm><glossdef><para>example: J or keV</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_FLUX</glossterm><glossdef><para>example: s-1 cm-2 </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_FREQUENCY</glossterm><glossdef><para>example: Hz</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_LENGTH</glossterm><glossdef><para>example: m </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_MASS</glossterm><glossdef><para>example: g </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_MASS_DENSITY</glossterm><glossdef><para>example: g cm-3</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_MOLECULAR_WEIGHT</glossterm><glossdef><para>example: g mol-1 </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_PER_AREA</glossterm><glossdef><para>example: cm-2 </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_PER_LENGTH</glossterm><glossdef><para>example: cm-1 </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_PERIOD</glossterm><glossdef><para>(alias to NX_TIME) period of pulsed source, example: microseconds </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_POWER</glossterm><glossdef><para>example: W </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_PRESSURE</glossterm><glossdef><para>example: Pa </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_PULSES</glossterm><glossdef><para>(alias to NX_NUMBER) clock pulses</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_SCATTERING_LENGTH_DENSITY</glossterm><glossdef><para>example: cm-2</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_SOLID_ANGLE</glossterm><glossdef><para>example: sr | steradian </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_TEMPERATURE</glossterm><glossdef><para>example: K </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_TIME</glossterm><glossdef><para>example: s</para></glossdef></glossentry>
                    <glossentry><glossterm>NX_TIME_OF_FLIGHT</glossterm><glossdef><para>(alias to NX_TIME) example: s </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_VOLTAGE</glossterm><glossdef><para>example: V </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_VOLUME</glossterm><glossdef><para>example: m3 </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_UNITLESS</glossterm><glossdef><para>for fields that don't have a unit (e.g. hkl) so that they don't inherit the wrong units </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_WAVELENGTH</glossterm><glossdef><para>example: Angstrom </para></glossdef></glossentry>
                    <glossentry><glossterm>NX_WAVENUMBER</glossterm><glossdef><para>units for Q, example: Angstrom-1 or nm-1 </para></glossdef></glossentry>
                </glosslist>
            </para>
        </simplesect>
    </section>
</chapter>
