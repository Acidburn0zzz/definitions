<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<appendix 
    xml:id="sect.impatient" 
    xmlns="http://docbook.org/ns/docbook" 
    version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
  >
    <title>NeXus: the basics for the truly impatient</title>

<!-- 
  TODO This could be rewritten from the ground up.
  ROADMAP for the impatient
  How to read a NeXus file?
  How to understand a NeXus file?
  How to write a NeXus file
  What else do I need to know?
-->

  <para>
    Sometimes, people are just too impatient to wade through a big manual.
    This chapter is your salvation.
    The basic organization within the NeXus hierarchy is described in 
    <xref linkend="impatient.organization"/>.
    <indexterm>
      <primary>hierarchy</primary>
      <secondary>NeXus</secondary>
    </indexterm>
    The NeXus coordinate system is described in <xref linkend="impatient.NeXus.coordinates.polplane"/>.
    The different purposes of NeXus base classes and application definitions
    are described in <xref linkend="impatient.NxdlClassNotes"/>.
    An example to construct a NXDL file is provided elsewhere
    (<xref linkend="CreatingNxdlSpec"/>)
    for a fictional scientific instrument that closely resembles a neutron powder diffractometer.
    Advice about storing the results from data processing 
    is given in <xref linkend="impatient.ProcessedDataSection"/>.
  </para>
  
  <!-- 
    ======================================================
    section: Basic organization within the NeXus hierarchy
    ======================================================
  -->
  <section xml:id="impatient.organization">
    <title>Basic organization within the NeXus hierarchy</title>
    <indexterm>
      <primary>hierarchy</primary>
      <secondary>NeXus</secondary>
    </indexterm>
    <!-- This section originated as part of Mark K's 2009 tutorial on NXDL -->
    <para>Let us start with a recapitulation of some of the NeXus features relevant to data files for analysis. 
      NeXus experts can skip this section. The
      first are some of the NeXus guiding principles.</para>
    <simplelist>
      <member>A NeXus file has to contain all the data necessary for standard data analysis.</member>
      <member>A NeXus file is extendable.</member>
    </simplelist>
    
    <para>Data in NeXus files are stored in a structured form. To this purpose,
      NeXus uses the concept of groups. A NeXus <emphasis>group</emphasis> is a container which can contain
      other groups or data sets (called <emphasis>field</emphasis>). NeXus identifies groups through two attributes:
      <code>name</code> and class (called <code>type</code> in the NeXus specification 
      for groups). <code>NXentry</code> is an example of a class while
      <code>entry</code> is an example of a name.
    </para>
    <para>
      NeXus <emphasis>group</emphasis> names 
      <!-- TODO and what about types? -->
      and <emphasis>field</emphasis> 
      names
      <indexterm>
        <primary>rules</primary>
        <secondary>NeXus</secondary>
        <tertiary>naming</tertiary>
      </indexterm> 
      must conform to certain simple rules.  
      Names such as <code>entry1</code> or <code>sample_temperature</code> are valid.
      The regular expression is: <code>[A-Za-z_][\w_]*</code>
      <indexterm>
        <primary>rules</primary>
        <secondary>HDF5</secondary>
      </indexterm>
    </para>
    <para>
      All NeXus class types adopted by the NIAC <emphasis>must</emphasis> 
      begin with <code>NX</code>.  
      <indexterm>
        <primary>rules</primary>
        <secondary>naming</secondary>
      </indexterm>
      Classes not adopted by the NIAC <emphasis>must not</emphasis>
      start with <code>NX</code>.
    </para>
    <para>
      Classes can have a <code>name</code> in addition to the <code>type</code>.
      For example, a class of type <code>NXentry</code> might be given the 
      name <code>entry</code>.      
      The NeXus suggestion is to derive the name from the class type
      unless there is some reason to choose otherwise.
      For example, <code>NXentry</code> would have a name of <code>entry</code>.
      HDF imposes a rule that says no two entities at the same level of an HDF file
      can have the same name.  The NeXus suggestion for a default name is 
      to follow the name with an index number starting from 1.  For example, with
      two <code>NXentry</code> groups, by default they would be named <code>name2</code>
      and <code>name2</code>.  Please remember that this is only a suggestion, not a requirement.
    </para>
    <para>
      A NeXus file has the following structure:
      <itemizedlist>
        <listitem>
          <para>
            <code>NXentry</code>
            <itemizedlist>
              <listitem><para><code>NXuser</code></para></listitem>
              <listitem><para><code>NXmonitor</code></para></listitem>
              <listitem><para><code>NXsample</code></para></listitem>
              <listitem><para><code>NXdata</code></para></listitem>
              <listitem>
                <para>
                  <code>NXinstrument</code>
                  <itemizedlist>
                    <listitem>
                      <para><code>NX</code><emphasis>component</emphasis></para>
                    </listitem>
                    <listitem>
                      <para><code>NX</code><emphasis>component</emphasis></para>
                    </listitem>
                  </itemizedlist>
                </para>
              </listitem>
            </itemizedlist>
          </para>
        </listitem>
      </itemizedlist>      
    </para>
    <para>
      This shows that at the root level of a NeXus file is a group of type
      <code>NXentry</code>. 
      In fact, one or more such groups are allowed, where each usually
      represents a separate <emphasis>measurement</emphasis>.<footnote>
        <para>A strict definition of <emphasis>measurement</emphasis>
        is not provided by NeXus.  Generally, a measurement is a single
        dataset and all related metadata.
          <indexterm><primary>metadata</primary></indexterm>
        </para>
      </footnote>
      These are NeXus structures for storing multiple (possibly related) data sets in one
      file. Note that a NeXus file must contain at least one <code>NXentry</code> group.
      The <code>NXentry</code> group will always be at the root level of a NeXus HDF file or will always be a
      child of the <code>NXroot</code> root element of a NeXus XML data file.     
    </para>
    <para>
      The <code>NXentry</code> group contains further groups:
      <itemizedlist>
        <listitem><para>one or more <code>NXuser</code> groups containing information (metadata) <indexterm><primary>metadata</primary></indexterm> about the experimenter</para></listitem>
        <listitem><para>An <code>NXsample</code> group which contains metadata about the sample</para></listitem>
        <listitem><para>One or more <code>NXmonitor</code> groups which contains data about the counting
          statistics and how counting happened.</para></listitem>
        <listitem><para>An <code>NXinstrument</code> which contains further groups, one for each relevant
          instrument component.</para></listitem>
        <listitem><para>One or more <code>NXdata</code> groups that describe
          the location (using <emphasis>links</emphasis>) of the 
          default plottable data
          <indexterm>
            <primary>NeXus basic motivation</primary>
            <secondary>default plot</secondary>
          </indexterm>
          <indexterm>
            <primary>plottable data</primary>
            <see>NeXus basic motivation, default plot</see>
          </indexterm>
          within this <code>NXentry</code>.<footnote>
          <para>The choice of the name of the <code>NXdata</code> class is historic
            so renaming it to something more descriptive of its actual function
            would break legacy data files.</para>
          </footnote>
          The information provided by the <code>NXdata</code> group, identification of
          the default plottable data,
          <indexterm>
            <primary>NeXus basic motivation</primary>
            <secondary>default plot</secondary>
          </indexterm>
          is one of the basic motivations (see
          <xref linkend="SimplePlotting"/>) for the NeXus standard.</para></listitem>
      </itemizedlist>
    </para>
  </section>
  
  <!-- 
    ==========================
    section: NeXus coordinates
    ==========================
  -->
  <section xml:id="impatient.NeXus.coordinates.polplane">
    <title>NeXus coordinates</title>
    <para>
      NeXus supports two coordinate systems.  
      See <xref linkend="SimplePlotting"/> for more details.
      Most people will use the simple coordinate system as shown in 
      <xref linkend="impatient.NeXus-simple-coords-figure"/>.
      <figure xml:id="impatient.NeXus-simple-coords-figure">
        <title>NeXus simple coordinate system</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="img/polplane.png" width="400pt" scalefit="1"/>
          </imageobject>
        </mediaobject>
      </figure>
    </para>
  </section>
  
  <!-- 
    ================================
    section: Note about NXDL Classes
    ================================
  -->
  <section xml:id="impatient.NxdlClassNotes">
    <title>Note about NXDL Classes</title>
    <para>NeXus base class and application definitions are written in NeXus Definition
      Language, NXDL. NXDL is in fact an application of XML to the problem of
      writing application definitions. The nice thing about NXDL is that it can be
      converted to an XML schema which then can be used to validate NeXus file
      against the definition.</para>
    <para>For information about creating a new definition in NXDL,
      see <xref linkend="CreatingNxdlSpec"/> for more details.</para>
    <variablelist>
      <varlistentry>
        <term>base classes</term>
        <listitem>
          <para>
            are dictionaries of names
            <indexterm>
              <primary>NeXus basic motivation</primary>
              <secondary>defined dictionary</secondary>
            </indexterm>
            to use for the various fields in a
            NeXus group. Consequently there is a base class for each defined NeXus
            groups. Base classes define names for anything which can possibly be used
            to describe this component. Thus base classes tend to be pretty big. Do
            not worry, we reduce this later.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>application definition</term>
        <listitem>
          <para>
             is a definition of the content of a NeXus file as
            used for a special instrument type or an exchange format for data later in
            the data analysis pipeline. This content is what a NeXus file producer has
            to provide in order to write a valid NeXus file for this type of application.
            In turn a data analysis software author can rely on this information to be
            present in a valid NeXus file for this type of application. Another use
            of an application definition is to use define the data interface between
            a source of data and a consumer.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <!-- 
    =======================
    section: Processed Data
    =======================
  -->
  <section xml:id="impatient.ProcessedDataSection">
    <title>Processed Data</title>
    <para>
      Data reduction and analysis programs are encouraged to store their results in
      NeXus data files. As far as possible or practical, the normal NeXus hierarchy
      <indexterm>
        <primary>hierarchy</primary>
        <secondary>NeXus</secondary>
      </indexterm>
      is to be implemented. 
      In addition, processed data files must contain a <code>NXprocess</code>
      group. This group, that documents and preserves data provenance, 
      contains the name of the data processing program and the
      parameters used to run this program in order to achieve the results stored in
      this entry. Multiple processing steps must have a separate entry each.
    </para>
  </section>

</appendix>
