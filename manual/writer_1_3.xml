<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id: h5py-example.xml 974 2011-10-27 05:11:55Z Pete Jemian $ -->
<section  xml:id="Example-writer_1_3" 
  xreflabel="h5py example writing the simplest NeXus data file"
  xmlns="http://docbook.org/ns/docbook" 
  version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title><code>h5py</code> example writing the simplest NeXus data file</title>
              
              <para>In this example, the 1-D scan data will be written into the simplest
                            possible NeXus HDF5 data file, containing only the required NeXus components.  
                            NeXus requires at least one <xref linkend="NXentry"/> group at the root level of
                            an HDF5 file.  The <code>NXentry</code> group "all the data and associated 
                            information that comprise a single measurement."
                            NeXus also requires that each <code>NXentry</code> group must contain at least 
                            one <xref linkend="NXdata"/> group.  <code>NXdata</code> is used to describe the 
                            plottable data in the <code>NXentry</code> group.  The simplest place to store 
                            data in a NeXus file is directly in the <code>NXdata</code> group,
                            as shown in the next figure.</para>  
              
              <figure xml:id="fig.simple-example-h5py" xreflabel="Simplest NeXus data file">
                            <!-- TODO: make new graphic and sync the names with THIS example! -->
                            <title>Simple Example</title>
                            <mediaobject>
                                          <imageobject>
                                                        <imagedata fileref="img/ex_writer_1_3.png" width="250pt" scalefit="1"/>
                                          </imageobject>
                            </mediaobject>
              </figure> 
              
              <para>In the above figure, the data file (<code>writer_1_3_h5py.hdf5</code>) contains
                            a hierarchy of items, starting with an <code>NXentry</code> named <code>entry</code>.
                            (The full HDF5 path reference, <code>/entry</code> in this case, is shown to the right of each 
                            component in the data structure.)  The next <code>h5py</code> code
                            example will show how to build an HDF5 data file with this structure.
                            Starting with the numerical data described above,
                            the only information
                            written to the file is the <emphasis>absolute</emphasis> minimum information NeXus requires.
                            In this example, you can see how the HDF5 file is created, how 
                            <xref linkend="Design-Groups"/> and datasets (<xref linkend="Design-Fields"/>)
                            are created, and how <xref linkend="Design-Attributes"/> are assigned.
                            Note particularly the <code>NX_class</code> attribute on each HDF5 group that 
                            describes which of the NeXus <xref linkend="ClassDefinitions-Base"/> is being used.
                            When the next Python program (<code>writer_1_3_h5py.py</code>) is run from the 
                            command line (and there are no problems), the <code>writer_1_3_h5py.hdf5</code>
                            file is generated.
              </para>

              <programlisting linenumbering="numbered"
                ><xi:include href="examples/h5py/writer_1_3_h5py.py" parse="text"
                /></programlisting>
              
              <para>We wish to make things a bit simpler for ourselves when creating the common
                            structures we use in our data files.  To help, we gather together some of the
                            common concepts such as <emphasis>create a file</emphasis>,
                            <emphasis>create a NeXus group</emphasis>,
                            <emphasis>create a dataset</emphasis> and start to build a helper library.
                            (See <xref linkend="h5py-example-my_lib" /> for more details.)
                            Here, we call it <code>my_lib</code>.  Applying it to the simple example above, our
                            code only becomes a couple lines shorter!  (Let's hope the library starts to help in larger or 
                            more complicated projects.)  Here's the revision that replaces direct calls to <code>numpy</code>
                            and <code>h5py</code> with calls to our library.  It generates the file 
                            <code>writer_1_3.hdf5</code>.</para>
              <programlisting linenumbering="numbered"
                ><xi:include href="examples/h5py/writer_1_3.py" parse="text"
                /></programlisting>
              
              <para>One of the tools provided with the HDF5 support libraries is
                            the <code>h5dump</code> command, a command-line tool to print out the
                            contents of an HDF5 data file.  With no better tool in place (the 
                            output is verbose), this is a good tool to investigate what has been 
                            written to the HDF5 file.  View this output from the command line
                            using <code>h5dump writer_1_3.hdf5</code>.  Compare the data contents with
                            the numbers shown above.  Note that the various HDF5 data types have all been 
                            decided by the <code>h5py</code> support package.</para>
              <note><para>The only difference between this file and one written using the NAPI
                            is that the NAPI file will have some additional, optional attributes set at the root
                            level of the file that tells the original file name, time it was written, and some version information
                            about the software involved.</para></note>
              <programlisting linenumbering="numbered"
                             ><xi:include href="examples/h5py/writer_1_3_h5dump.txt" parse="text"
                             /></programlisting>
              
              <para>Since the output of <code>h5dump</code> is verbose, a tool 
                            (see <xref linkend="h5py-example-h5toText" />)
                  was created to
                  print out the structure of HDF5 data files.  This tool provides a simplified view
                  of the NeXus file.  It is run with a command like this:  
                            <code>python h5toText.py h5dump writer_1_3.hdf5</code>.  Here is the output:</para>
              
              <programlisting linenumbering="numbered"
                ><xi:include href="examples/h5py/writer_1_3_structure.txt" parse="text"
                /></programlisting>
              
              <para>As the data files in these examples become more complex, you will appreciate 
                  the information density provided by the <code>h5toText.py</code> tool.</para>
  
</section>
