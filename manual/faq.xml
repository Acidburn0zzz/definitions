<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<appendix xml:id="FAQ" 
    version="5.0"
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Frequently Asked Questions</title>
    <indexterm significance="preferred">
        <primary>FAQ</primary>
    </indexterm>
    <para>This is a list of commonly asked questions concerning the NeXus data format.</para>
    <qandaset>
        <qandaentry>
            <question>
                <para>How many facilities use NeXus?</para>
            </question>
            <answer>
                <para>This is continually evolving. It has been used as the instrument format
                    for several years on some or all instruments at a number of facilities
                    including PSI (Switzerland), LLB (France), LANSCE (USA), and APS (USA). It
                    will be used on all future instrumentation at ISIS (UK), NIST (USA), and
                    ANSTO (Australia). Finally, it has been formally adopted by major facilities
                    under construction, the SNS (USA), JPARC (Japan) and Diamond Light Source
                    (UK).</para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>NeXus files are only useful for archiving instrumental data, aren't
                    they?</para>
            </question>
            <answer>
                <para>NeXus files can be used to store both extremely simple data, e.g. a single
                    (x,y) array, and highly complex instrument descriptions. In fact, the
                    original intention of the NeXus data format was to provide a way of
                    interchanging data between facilities and their user communities. However,
                    the power of NeXus hierarchical
                    <indexterm>
                        <primary>hierarchy</primary>
                        <secondary>NeXus</secondary>
                    </indexterm>
                    design has led to its adoption as a standard
                    archiving format by several major facilities, such as ISIS, LANSCE, and the
                    SNS.</para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Why aren't <code>NXsample</code> and <code>NXmonitor</code> groups stored
                    in the <code>NXinstrument</code> group?</para>
            </question>
            <answer>
                <para>A NeXus file can contain a number of <code>NXentry</code> groups, which
                    may represent different scans in an experiment, or sample and calibration
                    runs, etc. In many cases, though by no means all, the instrument has the
                    same configuration so that it would be possible to save space by storing the
                        <code>NXinstrument</code> group once and using multiple links in the
                    remaining <code>NXentry</code> groups. It is assumed that the sample and
                    monitor information would be more likely to change from run to run, and so
                    should be stored at the top level.</para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para> How do I identify the plottable data? 
                    <indexterm>
                        <primary>NeXus basic motivation</primary>
                        <secondary>default plot</secondary>
                    </indexterm>
                </para>
            </question>
            <answer>
                <para>Any program whose aim is to identify plottable data should use the
                    following procedure: <orderedlist>
                        <listitem>
                            <para>Open the first top level NeXus group with class
                                    <code>NXentry</code>.</para>
                        </listitem>
                        <listitem>
                            <para>Open the first NeXus group with class
                                <code>NXdata</code>.</para>
                        </listitem>
                        <listitem>
                            <para>
                                Loop through NeXus fields in this group searching for the
                                item with attribute <code>signal="1"</code> indicating
                                this field has the plottable data.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Check to see if this field has an attribute called <code>axes</code>.
                                If so, the names are defined as a comma-delimited string within
                                this attribute in the C-order of the data array, and you can
                                skip the next two steps.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                If the <code>axes</code> attribute is not defined, search for the
                                one-dimensional NeXus fields with attribute 
                                <code>primary="1"</code>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                These are the dimension scales to label the axes of each
                                dimension of the data.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Link each dimension scale to the respective data dimension by
                                the <code>axis</code> attribute (<code>axis="1"</code>,
                                <code>axis="2"</code>, ... up to the rank
                                <indexterm><primary>rank</primary></indexterm>
                                of the data).
                            </para>
                        </listitem>
                        <listitem>
                            <para>If necessary, close the <code>NXdata</code> group, open the next one and
                                repeat steps 3 to 6.</para>
                        </listitem>
                        <listitem>
                            <para>If necessary, close the <code>NXentry</code> group, open the
                                next one and repeat steps 2 to 7. </para>
                        </listitem>
                    </orderedlist> Consult the <link 
                        xlink:href="#ApplicationProgramInterfaceSection">NeXus API</link>
                    section, which describes the routines available to program these operations.
                    In the course of time, generic NeXus browsers will provide this
                    functionality automatically. </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Why are the NeXus classes so complicated? I'll never store all that
                    information</para>
            </question>
            <answer>
                <para>The NeXus classes are essentially glossaries of terms. If you need to
                    store a piece of information, consult the class definitions to see if it has
                    been defined. If so, use it. However, it is not compulsory to include every
                    item that has been defined if it is not relevant to your experiment. On the
                    other hand, if there is a NeXus definition for your instrument, you are
                    recommended to include all the compulsory items if you want to use standard
                    software to analyze your data.</para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>I want to write data.  What is the NXDL?</para>
            </question>
            <answer>
                <para>
                    Data is arranged in NeXus data files according to certain plans (or rules).
                    These plans are written in the NeXus Definition Language (NXDL).
                    <indexterm>
                        <primary>NXDL</primary>
                    </indexterm>
                    <note>
                        <para>
                            Previously, the structure of NeXus data files was described using
                            <emphasis>Meta-DTD</emphasis>, an XML format that provided a compact
                            description.  The terse format was not obvious to all and was difficult
                            to machine-process.  NXDL was conceived to be a simpler syntax than Meta-DTD.
                            The switch to NXDL is not intended to change what is in the data files, 
                            just provide an easier (and more generic) way of describing data files.
                        </para>
                    </note>
                </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>I want to produce an application definition. How do I go about it?</para>
            </question>
            <answer>
                <para>Read the NXDL <indexterm>
                        <primary>NXDL</primary>
                </indexterm> Tutorial in <xref linkend="CreatingNxdlSpec"/>.</para>
                <para>If you encounter any problems because the classes are not sufficient to
                    describe your configuration, please contact the NIAC Executive Secretary
                    explaining the problem, and post a suggestion at the relevant class wiki
                    page. The NIAC <indexterm>
                        <primary>NIAC</primary>
                    </indexterm> is always willing to consider proposals to amend the base
                    classes. The procedures are defined in the NIAC constitution.<footnote>
                        <para>Refer to the most recent version of the NIAC constitution on the
                            NIAC wiki: <link xlink:href="http://www.nexusformat.org/NIAC"
                                    ><literal>http://www.nexusformat.org/NIAC</literal></link>
                        </para>
                    </footnote></para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Explain what is the purpose of <code>NXdata</code>.</para>
            </question>
            <answer>
                <para>
                    The information provided by the <code>NXdata</code> group, identification of
                    the default plottable data,
                    <indexterm>
                        <primary>NeXus basic motivation</primary>
                        <secondary>default plot</secondary>
                    </indexterm>
                    is one of the basic motivations (see
                    <xref linkend="SimplePlotting"/>) for the NeXus standard.
                    The choice of the name of the <code>NXdata</code> class is historic
                    so renaming it to something more descriptive of its actual function
                    would break legacy data files.
                    <code>NXdata</code> contains links to the plottable data stored elsewhere
                    in the <code>NXentry</code>.
                </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Can I use a NXDL specification to parse a NeXus data file?</para>
            </question>
            <answer>
                <para>
                    This should be possible as there is nothing in the NeXus specifications
                    to prevent this but it is not implemented in NAPI.
                    <indexterm>
                        <primary>NAPI</primary>
                    </indexterm>
                    You would need to
                    implement it for yourself.  You would be wise to consult the algorithms
                    in the Java version of <code>NXvalidate</code> (see <xref linkend="NXvalidate-java"/>) for
                    more details.
                </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Is the <code>NAPItype</code> needed? I am always using a 
                    duck typing<footnote><para><link
                        xlink:href="http://en.wikipedia.org/wiki/Duck_typing"
                        ><code>http://en.wikipedia.org/wiki/Duck_typing</code
                        ></link></para></footnote>
                    <indexterm>
                        <primary>NAPI</primary>
                        <secondary>NAPItype</secondary>
                    </indexterm>
                    <indexterm>
                        <primary>duck typing</primary>
                    </indexterm>
                    programming
                    language for which this information is useless (and I don't know much
                    about C and colleagues). Can I leave it out? </para>
            </question>
            <answer>
                <para>
                    Nope. <code>NAPItype</code> is necessary. The thing is when 
                    implementing the 
                    NeXus-XML API we strived to make this as general as HDF and 
                    reasonably efficient for medium sized datasets. This is why 
                    we store arrays as a large bunch of numbers in C-storage order. 
                    And we need the <code>NAPItype</code> to figure out the 
                    dimensions of the dataset. 
                </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>Do I have to use the <code>NAPI</code> subroutines? 
                    Can't I read (or write) the NeXus data files with my own routines?</para>
            </question>
            <answer>
                <para>
                    You are not required to use the NAPI to write valid NeXus data files.
                    It is possible to avoid the NAPI to write and read valid NeXus data files.  
                    But, the programmer who chooses this path must have more understanding 
                    of how the NeXus HDF or XML data file is written.  Validation of data files 
                    written without the NAPI is strongly encouraged.
                </para>
            </answer>
        </qandaentry>
        <qandaentry>
            <question>
                <para>What file format should I choose for my data?</para>
            </question>
            <answer>
                <para>
                    HDF5 is the default file container to use for NeXus data.  
                    XML may be used as an alternative.  User provides the 
                    rationale for choosing this alternative.  HDF4 is the 
                    (now legacy) choice for NeXus data.  NeXus objects 
                    (such as <code>NXentry</code> and <code>NXdata</code>) 
                    are used but these are different than subroutines.  
                    Subroutines are part of the NAPI which is used to 
                    write and read files.  
                </para>
            </answer>
        </qandaentry>
    </qandaset>
</appendix>
