<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<chapter xml:id="VerificationChapter" xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Verification and validation of files</title>
    <indexterm significance="preferred">
        <primary>validation</primary>
    </indexterm>
    <indexterm significance="preferred">
        <primary>verification</primary>
        <see>validation</see>
    </indexterm>
    <para> The intent of verification and validation of files is to ensure, in an unbiased way, that
        a given file conforms to the relevant specifications. NeXus uses various automated tools to
        validate files. These tools include conversion of content from HDF to XML and transformation
        (via XSLT) from XML format to another such as NXDL, XSD, and Schematron. This chapter will
        first provide an overview of the process, then define the terms used in validation, then
        describe how multiple base classes or application definitions might apply to a given NeXus
        data file, and then describe the various validation techniques in more detail. Validation
        does not check that the data content of the file is sensible; this requires scientific
        interpretation based on the technique. </para>
    <para> Validation is useful to anyone who manipulates or modifies the contents of NeXus files.
        This includes scientists/users, instrument staff, software developers, and those who might
        mine the files for metadata. <indexterm>
            <primary>metadata</primary>
        </indexterm> First, the scientist or user of the data must be certain that the information
        in a file can be located reliably. The instrument staff or software developer must be
        confident the information they have written to the file has been located and formatted
        properly. At some time, the content of the NeXus file may contribute to a larger body of
        work such as a metadata catalog <indexterm>
            <primary>metadata</primary>
        </indexterm> for a scientific instrument, a laboratory, or even an entire user facility. </para>
    <section>
        <title>Overview</title>
        <figure xml:id="figure__unknown-reason">
            <title>
                What figure should be here?
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata
                        fileref="img/missing.jpg"
                        width="100pt" scalefit="1"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>NeXus files adhere to a set of rules
            <indexterm>
                <primary>rules</primary>
                <secondary>NeXus</secondary>
            </indexterm>
            and can be tested against these rules for
            compliance. The rules are implemented using standard tools and can themselves be tested
            to verify compliance with the standards for such definitions. Validation includes the
            testing of both NeXus data files and the NXDL specifications that describe the rules. 
            <figure xml:id="figure__nxvalidate">
                <title>
                    Flowchart of the NeXus validation process.
                </title>
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="img/nxvalidate.png"
                            width="400pt" scalefit="1"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <glosslist>
            <glossentry>
                <glossterm>NeXus data files</glossterm>
                <glossdef>
                    <para>NeXus data files (also known as NeXus data file instances) are validated
                        to ensure the various parts of the data file are arranged according to the
                        governing NXDL specifications used in that file instance. </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>NeXus Definition Language (NXDL) specification files</glossterm>
                <glossdef>
                    <para> NXDL files are validated to ensure they adhere to the rules
                        <indexterm>
                            <primary>rules</primary>
                            <secondary>NXDL</secondary>
                        </indexterm>
                        for writing
                        NeXus base classes and application definitions. </para>
                </glossdef>
            </glossentry>
        </glosslist>
        <!-- 
            Describe what is being validated and what is not being validated.
            
            Each NXDL file must be validated against the rules for NXDL files.
            <indexterm>
            <primary>rules</primary>
            <secondary>NXDL</secondary>
            </indexterm>
            
            Each NeXus data file can be validated against the NXDL rules.  
            That validation is done using Schematron.
            <indexterm>
            <primary>rules</primary>
            <secondary>NeXus</secondary>
            </indexterm>
        -->
    </section>
    <section>
        <title>Definitions of these terms</title>
        <para>This is a paragraph.</para>
    </section>
    <section>
        <title>NeXus data files may use multiple base classes or application definitions</title>
        <para>This is a paragraph.</para>
    </section>
    <section>
        <title>Validation techniques</title>
        <indexterm>
            <primary>validation</primary>
        </indexterm>
        <para> Describe the tools used to validate files from the user's perspective and then from
            the software developer's perspective. </para>
        <section>
            <title>Overview</title>
            <para>This is a paragraph.</para>
        </section>
        <section>
            <title>Validation of NeXus data files</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>NeXus data files</secondary>
            </indexterm>
            <para> Each NeXus data file can be validated against the NXDL rules.
                <indexterm>
                    <primary>rules</primary>
                    <secondary>NeXus</secondary>
                </indexterm>
                (The full suite of
                NXDL specifications is converted into Schematron rules by an XSLT<indexterm>
                    <primary>XSLT</primary>
                </indexterm> transformation and then combined into a single file. It is not allowed
                to have a NeXus base class and also an application definition with the same name
                since one will override the other in the master Schematron file) The validation is
                done using Schematron and the <literal>NXvalidate</literal> program. Schematron was
                selected, rather than XML Schema (XSD), to permit established rules for NeXus files,
                especially the rule allowing the nodes within <code>NXentry</code> to appear in any
                order. </para>
            <!-- TODO: describe what is and is not being validated -->
            <note>
                <para>It is very important to describe what is and is not being validated.</para>
            </note>
            <para> First, the NeXus data file instance (either HDF or XML) is converted </para>
        </section>
        <section>
            <title>Validation of NeXus Definition Language (NXDL) specification files</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>NXDL specifications</secondary>
            </indexterm>
            <para> Each NXDL file must be validated against the rules
                <indexterm>
                    <primary>rules</primary>
                    <secondary>NXDL</secondary>
                </indexterm>
                that define how NXDL files are
                to be arranged. The NXDL rules are specified in the form 
                of XML Schema (XSD).<indexterm>
                    <primary>XML Schema (XSD)</primary>
                </indexterm>
            </para>
        </section>
        <section>
            <title>Schematron</title>
            <indexterm significance="preferred">
                <primary>Schematron</primary>
            </indexterm>
            <para>This is a paragraph.</para>
        </section>
        <section>
            <title>Transformation of NXDL files to Schematron</title>
            <indexterm>
                <primary>NXDL</primary>
            </indexterm>
            <indexterm>
                <primary>Schematron</primary>
            </indexterm>
            <para>Schematron<footnote
                ><para><link 
                    xlink:href="http://www.schematron.com"
                    ><code >http://www.schematron.com</code
                    ></link></para></footnote>
                <indexterm>
                    <primary>rules</primary>
                    <secondary>Schematron</secondary>
                </indexterm>
                is a rule-based
                language that allows very specific validation of an XML
                document.
                Its advantages over using XSD schema are
                that: <itemizedlist>
                    <listitem>
                        <para>more specific pattern-based rules based on data content can be
                            written</para>
                    </listitem>
                    <listitem>
                        <para>full XSLT/XPath expression syntax available for writing 
                            validation tests</para>
                    </listitem>
                    <listitem>
                        <para>error messages can be customised and thus more meaningful</para>
                    </listitem>
                    <listitem>
                        <para>It is easier to validate documents when entities can occur in any
                            order.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>XSD does provide a mechanism for defining a class structure and inheritance, so
                its usage within NeXus in addition to schematron has not been ruled out. But for a
                basic validation of file content, schematron looks best. </para>
            <para>The NXDL definition files are converted into a set of Schematron rules 
                <indexterm>
                    <primary>rules</primary>
                    <secondary>NeXus</secondary>
                </indexterm>
                using the
                    <code>xslt/nxdl2sch.xsl</code> XSLT stylesheet. The NeXus instance file (either
                in XML or HDF5) is turned into a reduced XML validation file. This file is very
                similar to a pure NeXus XML file, but with additional metadata for dimenions and
                also with most of the actual numeric data removed.</para>
            <para>The validation process then compares the set of Schematron rules against the
                    <emphasis>reduced XML</emphasis> validation file.  Schematron itself is
                implemented as a set of XSLT transforms.  NeXus includes the Schematron 
                files, as well as the Java based XSLT engine <code>saxon</code>.</para>
            <para>The <code>utils/validate.py</code> script is provided that runs through all of
                these steps. This same process can also be acopmplished using the java
                    <code>nxvalidate</code> GUI (<emphasis>in development early
                2010</emphasis>).</para>
            <!--<para/>-->
            <para>Currently, the structure of the file is validated (i.e. valid names are used at
                the correct points), but this will be extended to array dimensions and link targets.
                Error messages are printed about missing mandatory fields, and informational
                messages are printed about fields that are neither optional or mandatory (in case
                they are a typing error). Even non-standard names must comply with a set of rules
                (e.g. no spaces are allowed in names). Enumerations are checked that they conform to
                an allowed value. The data type is checked. The units will be checked.</para>
            <!--<para/>-->
            <!--<para> </para>-->
        </section>
    </section>
</chapter>
