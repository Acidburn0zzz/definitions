<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<appendix  
	version="5.0"
    xml:id="Verification" 
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Verification and validation of files</title>
    <indexterm significance="preferred">
        <primary>validation</primary>
    </indexterm>
    <indexterm significance="preferred">
        <primary>verification</primary>
        <see>validation</see>
    </indexterm>
    
    <!-- ++++++++++++++++++++++++++++ -->

    <para> The intent of verification and validation of files is to ensure, in an unbiased way, that
        a given file conforms to the relevant specifications. NeXus uses various automated tools to
        validate files. These tools include conversion of content from HDF to XML and transformation
        (via XSLT) from XML format to another such as NXDL, XSD, and Schematron. This chapter will
        first provide an overview of the process, then define the terms used in validation, then
        describe how multiple base classes or application definitions might apply to a given NeXus
        data file, and then describe the various validation techniques in more detail. Validation
        does not check that the data content of the file is sensible; this requires scientific
        interpretation based on the technique. </para>
    <para> Validation is useful to anyone who manipulates or modifies the contents of NeXus files.
        This includes scientists/users, instrument staff, software developers, and those who might
        mine the files for metadata. <indexterm>
            <primary>metadata</primary>
        </indexterm> First, the scientist or user of the data must be certain that the information
        in a file can be located reliably. The instrument staff or software developer must be
        confident the information they have written to the file has been located and formatted
        properly. At some time, the content of the NeXus file may contribute to a larger body of
        work such as a metadata catalog <indexterm>
            <primary>metadata</primary>
        </indexterm> for a scientific instrument, a laboratory, or even an entire user facility. </para>
    
    <!-- ++++++++++++++++++++++++++++ -->
    
    <section xml:id="Verification-Overview">
        <title>Overview</title>
        <para>NeXus files adhere to a set of rules <indexterm>
                <primary>rules</primary>
                <secondary>NeXus</secondary>
            </indexterm> and can be tested against these rules for compliance. The rules are
            implemented using standard tools and can themselves be tested to verify compliance with
            the standards for such definitions. Validation includes the testing of both NeXus data
            files and the NXDL specifications that describe the rules. </para>
        <para> The rules for writing NeXus data files are different than the rules for writing NeXus
            class definitions. To validate a NeXus data file, these two rule sets must eventually
            merge, as shown in the next figure. The data file (either HDF4, HDF5, or XML) is first
            converted into an internal format to facilitate validation, including data types, array
            dimensions, naming, and other items. Most of the data is not converted since data
            validation is non-trivial. Also note that the units are not validated. All the NXDL
            files are converted into a single Schematron file (again, internal use for validation)
            only when NXDL revisions are checked in to the NeXus definitions repository as NXDL
            changes are not so frequent. 
            <!-- TODO: Will we describe how validation code can check to see if it is 
				using the most recent version of the master Schematron file?
			-->
            <figure xml:id="figure.nxvalidate">
                <title> Flowchart of the NeXus validation process. </title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/nxvalidate.png" width="400pt" scalefit="1"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </para>
        <glosslist>
            <glossentry>
                <glossterm>NeXus data files</glossterm>
                <glossdef>
                    <para>NeXus data files (also known as NeXus data file instances) are validated
                        to ensure the various parts of the data file are arranged according to the
                        governing NXDL specifications used in that file instance. <indexterm>
                            <primary>rules</primary>
                            <secondary>NeXus</secondary>
                        </indexterm>
                    </para>
                    <note>
                        <para>Since NeXus has several rules that are quite difficult to apply in
                            either XSD or Schematron, direct validation of data files using standard
                            tools is not possible. To validate NeXus data files, it is necessary to
                            use <code>nxvalidate</code>. 
                            <!--<emphasis role="bold"> What about the Java
                                tools? </emphasis>-->
                        </para>
                    </note>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>NeXus Definition Language (NXDL) specification files</glossterm>
                <glossdef>
                    <para> NXDL files are validated to ensure they adhere to the rules <indexterm>
                            <primary>rules</primary>
                            <secondary>NXDL</secondary>
                        </indexterm> for writing NeXus base classes and application definitions.
                    </para>
                </glossdef>
            </glossentry>
        </glosslist>
    </section>
    
    <!-- ++++++++++++++++++++++++++++ -->
    
    <section xml:id="Verification-Definitions">
        <title>Definitions of these terms</title>
        <para>Let's be clear about some terms used in this section.</para>
        <glosslist>
            <glossentry>
                <glossterm>HDF</glossterm>
                <glossdef>
                    <para> Hierarchical Data Format from The HDF Group. 
                        <indexterm>
                            <primary>HDF</primary>
                        </indexterm>
                        NeXus data files using HDF
                        may be stored in either version 4 (HDF4) or version 5 (HDF5). New NeXus HDF
                        files should only use HDF5. The preferred file extensions 
                        (but not required)
                        include <code>.hdf</code>, <code>.h5</code>, <code>.nxs</code>,
                        and <code>.nx5</code>.
                    </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>NXDL</glossterm>
                <glossdef>
                    <para> NeXus Definition Language files define the spcifications for NeXus base
                        classes, application definitions, and contributed classes and definitions.
                        It is fully described in the NXDL chapter in Volume II of this documentation.
                    </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>Schematron</glossterm>
                <glossdef>
                    <para>
                        <link xlink:href="http://www.schematron.com"
                            >Schematron</link>.<footnote><para>
                                <link xlink:href="http://www.schematron.com"
                                    ><literal>http://www.schematron.com</literal
                                    ></link></para></footnote>
                        is an alternative to XSD and is used to validate the content
                        and structure of an XML file.  NeXus uses Schematron internally to
                        validate data files.
                    </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>Validation</glossterm>
                <glossdef>
                    <para> File validation is the comparison of file contents, in an unbiased way,
                        with the set of rules that define the structure of such files. </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>XML</glossterm>
                <glossdef>
                    <para>
                        The eXtensible Markup Language (XML)
                        <link xlink:href="http://www.w3schools.com/xml"
                            >eXtensible Markup Language (XML)</link>.<footnote><para>
                                <link xlink:href="http://www.w3schools.com/xml"
                                    ><literal>http://www.w3schools.com/xml</literal
                                    ></link></para></footnote>
                        is a standard business tool for the
                        exchange of information. It is broadly supported by a large software library
                        in many languages. NeXus uses XML for several purposes: data files, NXDL
                        definitions, rules, and XSLT transformations. </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>XSD</glossterm>
                <glossdef>
                    <para> XML files are often defined by a set of rules (or
                            <emphasis>schema</emphasis>). A common language used to implement these
                        rules is 
                        <link xlink:href="http://www.w3schools.com/xsd"
                            >XML Schema (XSD)</link>.<footnote><para>
                                <link xlink:href="http://www.w3schools.com/xsd"
                                    ><literal>http://www.w3schools.com/xsd</literal
                                    ></link></para></footnote>
                        <!--
                            Good place for a URL to XSD Schema
                        -->
                        Fundamentally, XML, XSD, XSLT, and Schematron files are all in XML.
                    </para>
                </glossdef>
            </glossentry>
            <glossentry>
                <glossterm>XSLT</glossterm>
                <glossdef>
                    <para> XML files can be flexible enough to convert from one set of rules to
                        another. An example is when one company wishes to exchange catalog or
                        production information with another. The XML StyLsheet Transformation 
                        (<link xlink:href="http://www.w3schools.com/xsl/"
                            >XSLT</link>)<footnote><para>
                                <link xlink:href="http://www.w3schools.com/xsl/"
                                    ><literal>http://www.w3schools.com/xsl</literal
                                    ></link></para></footnote>
                        (XSLT)
                        language is often used to describe each direction of the conversion of the
                        XML files between the two rule sets. </para>
                </glossdef>
            </glossentry>
        </glosslist>
    </section>
    
    <!-- ++++++++++++++++++++++++++++ -->
    
    <section xml:id="Verification-Multipledefs">
        <title>NeXus data files may use multiple base classes or application definitions</title>
        <para> NeXus data files may have more than one data set or may have multiple instances of
            just about any base class or even application definitions. The NeXus data file
            validation is prepared to handle this without any special effort by the provider of the
            data file. </para>
    </section>
    
    <!-- ++++++++++++++++++++++++++++ -->
    
    <section xml:id="Verification-Techniques">
        <title>Validation techniques</title>
        <indexterm>
            <primary>validation</primary>
        </indexterm>
        <para> File validation is the process to determine if a given file is prepared consistent
            with a set of guidelines or rules. <indexterm>
                <primary>rules</primary>
            </indexterm> In NeXus, there are several different types of files. First, of course, is
            the data file yet it can be provided in one of several forms: HDF4, HDF5, or XML.
            Specifications for data files are provided by one or (usually) more NeXus definition
            files (NXDL, for short). These NXDL files are written in XML and validated by the NXDL
            specification which is written in the XML Schema (or XSD) language. <indexterm>
                <primary>XML Schema (XSD)</primary>
            </indexterm> Thus, automated file verification is available for data files, definition
            files, and the rules for definition files. </para>
        
        <!-- ++++++++++++++++++++++++++++ -->
        
        <section xml:id="Verification-Data">
            <title>Validation of NeXus data files</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>NeXus data files</secondary>
            </indexterm>
            <para> Each NeXus data file can be validated against the NXDL rules. <indexterm>
                    <primary>rules</primary>
                    <secondary>NeXus</secondary>
                </indexterm> (The full suite of NXDL specifications is converted into Schematron
                rules by an XSLT<indexterm>
                    <primary>XSLT</primary>
                </indexterm> transformation and then combined into a single file. It is not allowed
                to have a NeXus base class and also an application definition with the same name
                since one will override the other in the master Schematron file) The validation is
                done using Schematron and the <literal>NXvalidate</literal> program. Schematron <indexterm>
                    <primary>Schematron</primary>
                </indexterm> was selected, rather than XML Schema (XSD) <indexterm>
                    <primary>XML Schema (XSD)</primary>
                </indexterm>, to permit established rules for NeXus files, especially the rule
                allowing the nodes within <code>NXentry</code> to appear in any order. </para>
            <!-- TODO: describe what is and is not being validated -->
            <para>
                First, the NeXus data file instance (either HDF or XML) is converted
                into an XML file in a form that facilitates validation.  Then the
                XML file is validated by Schematron against the <code>schema/all.sch</code>
                file.
            </para>
        </section>

        <!-- ++++++++++++++++++++++++++++ -->

        <section xml:id="Verification-NXDL">
            <title>Validation of NeXus Definition Language (NXDL) specification files</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>NXDL specifications</secondary>
            </indexterm>
            <para> Each NXDL file must be validated against the rules <indexterm>
                    <primary>rules</primary>
                    <secondary>NXDL</secondary>
                </indexterm> that define how NXDL files are to be arranged. The NXDL rules are
                specified in the form of XML Schema (XSD).<indexterm>
                    <primary>XML Schema (XSD)</primary>
                </indexterm>
            </para>
            <para> Standard tools (validating editor or command line or support library) can be used
                to validate any NXDL file. Here's an example using <code>xmllint</code> 
                from a directory that contains <code>nxdl.xsd</code>,
                <code>nxdlTypes.xsd</code>, and
                <code>applications/NXsas.nxdl.xml</code>:
                <example>
                    <title>Use of <code>xmllint</code> to validate a NXDL specification.</title>
                    <programlisting language="c"
                        >xmllint noout --schema nxdl.xsd applications/NXsas.nxdl.xml</programlisting>
                </example>
            </para>
        </section>
        
        <!-- ++++++++++++++++++++++++++++ -->
        
        <section xml:id="Verification-NXDL-rules">
            <title>Validation of the NXDL rules</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>NXDL rules</secondary>
            </indexterm>
            <para>NXDL rules are specified using the rules of XML Schema (XSD). <indexterm>
                <primary>XML Schema (XSD)</primary>
            </indexterm> The XSD syntax of the rules is validated using standard XML file
                validation tools: either a validating editor (such as <emphasis>oXygen</emphasis>,
                <emphasis>xmlSpy</emphasis>, or <emphasis>eclipse</emphasis>) or common
                UNIX/Linux command line tools
                <example>
                    <title>Use of <code>xmllint</code> to validate the NXDL rules.</title>
                    <programlisting language="c">xmllint --valid  nxdl.xsd</programlisting>
                </example> The validating editor method is used by the developers while the
                <code>xmllint</code> command line tool is the automated method used by the NeXus
                definitions subversion repository. </para>
        </section>
        
        <!-- ++++++++++++++++++++++++++++ -->
        
        <section xml:id="Verification-XSLT">
            <title>Validation of XSLT files</title>
            <indexterm>
                <primary>validation</primary>
                <secondary>XSLT files</secondary>
            </indexterm>
            <para>XSLT transformations are validated using standard tools
                such as a validating editor or xmllint. 
                <indexterm>
                    <primary>XSLT</primary>
                </indexterm> 
                <!-- Care to give an example of validating an XSLT using xmllint or saxon? -->
            </para>
        </section>
        
        <!-- ++++++++++++++++++++++++++++ -->
        
        <section xml:id="Verification-NXDL-to-SCH">
            <title>Transformation of NXDL files to Schematron</title>
            <indexterm>
                <primary>NXDL</primary>
            </indexterm>
            <indexterm>
                <primary>Schematron</primary>
            </indexterm>
            <para>Schematron<footnote>
                    <para><link xlink:href="http://www.schematron.com"
                                ><code>http://www.schematron.com</code></link></para>
                </footnote>
                <indexterm>
                    <primary>rules</primary>
                    <secondary>Schematron</secondary>
                </indexterm> is a rule-based language that allows very specific validation of an XML
                document. Its advantages over using XSD schema are that: <itemizedlist>
                    <listitem>
                        <para>more specific pattern-based rules based on data content can be
                            written</para>
                    </listitem>
                    <listitem>
                        <para>full XSLT/XPath expression syntax available for writing validation
                            tests</para>
                    </listitem>
                    <listitem>
                        <para>error messages can be customised and thus more meaningful</para>
                    </listitem>
                    <listitem>
                        <para>It is easier to validate documents when entities can occur in any
                            order.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>XSD does provide a mechanism for defining a class structure and inheritance, so
                its usage within NeXus in addition to schematron has not been ruled out. But for a
                basic validation of file content, schematron looks best. </para>
            <para>The NXDL definition files are converted into a set of Schematron rules <indexterm>
                    <primary>rules</primary>
                    <secondary>NeXus</secondary>
                </indexterm> using the <code>xslt/nxdl2sch.xsl</code> XSLT stylesheet. The NeXus
                instance file (either in XML, HDF4, or HDF5)
                <!--
                    True?  HDF4?
                -->
                is turned into a reduced XML validation file.
                This file is very similar to a pure NeXus XML file, but with additional metadata for
                dimenions and also with most of the actual numeric data removed.</para>
            <para>The validation process then compares the set of Schematron rules against the
                    <emphasis>reduced XML</emphasis> validation file. Schematron itself is
                implemented as a set of XSLT transforms. NeXus includes the Schematron files, as
                well as the Java based XSLT engine <code>saxon</code>.</para>
            <para>The <code>utils/validate.py</code> script is provided that runs through all of
                these steps. This same process can also be acopmplished using the java
                    <code>nxvalidate</code> GUI (<emphasis>in development early
                2010</emphasis>).</para>
            <para>Currently, the structure of the file is validated (i.e. valid names are used at
                the correct points), but this will be extended to array dimensions
                and link 
                <indexterm><primary>link</primary></indexterm>
                targets.
                Error messages are printed about missing mandatory fields, and informational
                messages are printed about fields that are neither optional or mandatory (in case
                they are a typing error). Even non-standard names must comply with a set of rules
                (e.g. no spaces are allowed in names). Enumerations are checked that they conform to
                an allowed value. The data type is checked. The units will be checked.</para>
        </section>
    </section>
</appendix>
