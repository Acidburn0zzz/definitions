<?xml version="1.0" encoding="UTF-8"?>
<!--
########### SVN repository information ###################
# $LastChangedDate$
# $LastChangedBy$
# $LastChangedRevision$
# $HeadURL$
########### SVN repository information ###################
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://definition.nexusformat.org/nxdl/3.1"
	xmlns:nx="http://definition.nexusformat.org/nxdl/3.1" 
	version="$Id$"
	elementFormDefault="qualified">

	<xs:annotation>
		<xs:documentation>
			# NeXus - Neutron and X-ray Common Data Format
			# 
			# Copyright (C) 2008-2010 NeXus International Advisory Committee (NIAC)
			# 
			# This library is free software; you can redistribute it and/or
			# modify it under the terms of the GNU Lesser General Public
			# License as published by the Free Software Foundation; either
			# version 3 of the License, or (at your option) any later version.
			#
			# This library is distributed in the hope that it will be useful,
			# but WITHOUT ANY WARRANTY; without even the implied warranty of
			# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
			# Lesser General Public License for more details.
			#
			# You should have received a copy of the GNU Lesser General Public
			# License along with this library; if not, write to the Free Software
			# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
			#
			# For further information, see http://www.nexusformat.org
		</xs:documentation>
	</xs:annotation>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<xs:include schemaLocation="nxdlTypes.xsd">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				Definitions of the basic data types and unit types 
				allowed in NXDL instance files.
			</xs:documentation>
		</xs:annotation>
	</xs:include>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<!-- define the document root element -->
	<xs:element name="definition" type="nx:definitionType">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				A <code>definition</code> element
				is the <code>group</code> at the
				root of every NXDL specification.
				It may <emphasis>only</emphasis> appear
				at the root of an NXDL file and must only appear once
				for the NXDL to be <emphasis>well-formed</emphasis>.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<xs:simpleType name="validItemName">
		<xs:annotation>  
			   <xs:documentation>  
				  Used for allowed names of elements and attributes.  
				  Need to be restricted to valid program variable names.  
				  Note:  This means no "-" or "." characters can be allowed and
				  you cannot start with a number.
				  HDF4 had a 64 character limit on names 
				  (possibly including NULL) and NeXus enforces this 
				  via the <code>NX_MAXNAMELEN</code> variable.
				</xs:documentation>  
		</xs:annotation>  
		<xs:restriction base="xs:token">
			<xs:pattern value="[A-Za-z_][\w_]*" />
			<xs:maxLength value="63" />   <!-- enforce via NX_MAXNAMELEN -->
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="validNXClassName">
		<xs:annotation>  
		   <xs:documentation>  
			  Used for allowed names of NX class types (e.g. NXdetector) 
			  not the instance (e.g. bank1) which is covered by validItemName.  
			</xs:documentation>  
		</xs:annotation>  
		<xs:restriction base="nx:validItemName">
			<xs:pattern value="NX.+"/>
		</xs:restriction>
	</xs:simpleType>
	
	<xs:simpleType name="validTargetName">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				This is a valid link target - currently it must be an absolute path
				made up of valid names with the <code>/</code> character delimiter.  But we may
				want to consider allowing "<code>..</code>" (parent of directory) at some point.
				If the <code>name</code> attribute is helpful, then use it in the path 
				with the syntax of "<code>name:type</code>" as in these examples:
				<code>/NXentry/NXinstrument/analyzer:NXcrystal/ef
				/NXentry/NXinstrument/monochromator:NXcrystal/ei
				/NX_other</code>
				Must also consider use of name attribute in resolving link targets.
			</xs:documentation>  
		</xs:annotation>  
		<xs:restriction base="xs:token">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					The HDF5 documentation 
					(<code>http://www.hdfgroup.org/HDF5/doc/UG/UG_frame09Groups.html</code>)
					says "<quote>Note that relative path names in HDF5 do not employ the ../ notation, 
					the UNIX notation indicating a parent directory, to indicate a parent group.</quote>"
					Thus, if we only consider the case of 
					<code>[name:]type</code>, the matching regular expression syntax
					is written: <code>/[a-zA-Z_][\w_]*(:[a-zA-Z_][\w_]*)?)+</code>.
					Note that HDF5 also permits relative path names, such as:
					<code>GroupA/GroupB/Dataset1</code>
					but this is not permitted in the matching regular expression and not supported in NAPI.
				</xs:documentation>
			</xs:annotation>
			<xs:pattern value="(/[a-zA-Z_][\w_]*(:[a-zA-Z_][\w_]*)?)+" />
		</xs:restriction>
	</xs:simpleType>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<xs:complexType name="definitionType">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					A <code>definition</code> is the root element of every NXDL definition.
					The <code>definitionType</code> defines the documentation, 
					attributes, fields, and groups that will be used
					as children of the <code>definition</code> element.
					Contains:
					<itemizedlist>
						<listitem><para><code>attribute</code></para></listitem>
						<listitem><para><code>doc</code></para></listitem>
						<listitem><para><code>field</code></para></listitem>
						<listitem><para><code>group</code></para></listitem>
						<listitem><para><code>link</code></para></listitem>
					</itemizedlist>
				</xs:documentation>
			</xs:annotation>
		<xs:group ref="nx:groupGroup" minOccurs="0" maxOccurs="unbounded">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					... no documentation yet ...
				</xs:documentation>
			</xs:annotation>
		</xs:group>
		<xs:attribute name="name" use="required" type="nx:validItemName">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					(<emphasis role="bold">required</emphasis>) 
					The <code>name</code> of this NXDL file (without the file extensions).
					The name must be unique amongst all the NeXus base class, application,
					and contributed definitions.  For the class to be adopted by the NIAC,
					the first two letters must be "NX" (in uppercase).  Any other use
					must <emphasis>not</emphasis> begin with "NX" in any combination
					of upper or lower case.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="version" use="required">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					(<emphasis role="bold">required</emphasis>) 
					Version of <emphasis>this</emphasis> NXDL definition.  
					Each NXDL specification
					may have a different version to facilitate software maintenance.
					This value is modified by the person who edits this file when
					this NXDL specification has changed significantly (in a way that
					downstream software should be aware).
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" use="required" type="nx:definitionTypeAttr">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					(<emphasis role="bold">required</emphasis>) 
					Must be <code>type="group"</code>
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="extends" use="optional">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					The <code>extends</code> attribute allows this definition
					to <emphasis>subclass</emphasis> from another NXDL,
					otherwise <code>extends="NXobject"</code> should be used.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="restricts" use="optional">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					The <code>restricts</code> attribute is a flag to the data validation.
					When <code>restricts="1"</code>, any non-standard component found
					(and checked for validity aginst this NXDL specification)
					in a NeXus data file will be flagged as an error.  If the
					<code>restricts</code> attribute is not present, any such situations
					will produce a warning.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="svnid" use="optional">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					The identifier string from the subversion revision control system.
					This reports the time stamp and the revision number of this file.
					(Updated automatically, unlike the <code>version</code> attribute.)
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="category" use="required">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					NXDL <code>base</code> definitions define the dictionary of terms to use for these components.  
					All terms in a <code>base</code> definition are optional.
					NXDL <code>application</code> definitions define what is required for a scientific interest.  
					All terms in an <code>application</code> definition are required.
					NXDL <code>contributed</code> definitions may be considered either base or applications.
					<!-- TODO eventually, will contributed defs need to indicate their intended usage? -->
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="base"/>
					<xs:enumeration value="application"/>
					<xs:enumeration value="contributed"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	
	<xs:simpleType name="definitionTypeAttr">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				Prescribes the allowed values for <code>definition</code> <code>type</code> attribute.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="group" />
			<xs:enumeration value="definition" />
		</xs:restriction>
	</xs:simpleType>
	
	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<xs:complexType name="groupType">
		<xs:annotation>
			<xs:documentation>
				A group element refers to the definition of 
				an existing NX object or a locally-defined component.
				Contains:
				<itemizedlist>
					<listitem><para><code>attribute</code></para></listitem>
					<listitem><para><code>doc</code></para></listitem>
					<listitem><para><code>field</code></para></listitem>
					<listitem><para><code>group</code></para></listitem>
					<listitem><para><code>link</code></para></listitem>
				</itemizedlist>
			</xs:documentation>
		</xs:annotation>
		<xs:group ref="nx:groupGroup" minOccurs="0" maxOccurs="unbounded">
			<xs:annotation>
				<xs:documentation>
					A group may contain other groups.
				</xs:documentation>
			</xs:annotation>
		</xs:group>
		<xs:attribute name="type" use="required" type="nx:validNXClassName">
			<xs:annotation>
				<xs:documentation>
					The <code>type</code> attribute <emphasis>must</emphasis> 
					contain the name of a 
					NeXus base class, application definition, or contributed definition.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="name" use="optional" type="nx:validItemName">
			<xs:annotation>
				<xs:documentation>
					A particular scientific application may expect
					a name of a group element, it is helpful but not
					required to specify the <code>name</code>
					attribute in the NXDL file.
					It is suggested to always specify a <code>name</code>
					to avoid ambiguity.  It is also suggested to 
					derive the <code>name</code> from the 
					type, using an additional number suffix as necessary.
					For example, consider a data file with only one 
					<code>NXentry</code>.  The suggested default 
					<code>name</code> would
					be <code>entry</code>.  For a data file with two or more
					<code>NXentry</code> groups, the suggested names would be
					<code>entry1</code>, <code>entry2</code>, ...
					Alternatively, a scientific application such as small-angle 
					scattering might require
					a different naming procedure; two different <code>NXaperture</code> groups
					might be given the names <code>beam-defining slit</code>
					and <code>scatter slit</code>.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="minOccurs" use="optional" default="0" type="xs:nonNegativeInteger">
			<xs:annotation>
				<xs:documentation>
					Minimum number of times this group is allowed to be present within its
					parent group.  Note each group must have a <code>name</code> attribute
					that is unique among all <code>group</code> and <code>field</code>
					declarations within a common parent group.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="maxOccurs" use="optional"  default="unbounded">
			<xs:annotation>
				<xs:documentation>
					Maximum number of times this group is allowed to be present within its
					parent group.  Note each group must have a <code>name</code> attribute
					that is unique among all <code>group</code> and <code>field</code>
					declarations within a common parent group.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:group name="groupGroup">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				A <code>groupGroup</code> defines the allowed children of a 
				<code>group</code> specification.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="doc" type="nx:docType" minOccurs="0"
				maxOccurs="1" />
			<xs:element name="attribute" type="nx:attributeType"
				minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="group" type="nx:groupType" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="field" type="nx:fieldType" minOccurs="0"
				maxOccurs="unbounded" />
			<xs:element name="link" type="nx:linkType" minOccurs="0"
				maxOccurs="unbounded" />
		</xs:sequence>
	</xs:group>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<xs:complexType name="basicComponent">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					A <code>basicComponent</code> defines the allowed name 
					format and attributes common to all <code>field</code> 
					and <code>group</code> specifications.
				</xs:documentation>
			</xs:annotation>
		<xs:sequence>
			<xs:element name="doc" type="nx:docType" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="name" use="required" type="nx:validItemName">
			<xs:annotation>
				<xs:documentation>
					Identifier string (must be unique within the enclosing group) for this entity.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="deprecated" use="optional">
			<xs:annotation>
				<xs:documentation>
					If present,
					the <code>deprecated</code> attribute contains
					an advisory message to appear as part of a warning 
					during data file validation.  
					Future versions of the NXDL file might
					not define (or even re-use) this component.
				</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:pattern value=".*(\w+).*" />
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

	<xs:simpleType name="basicType">
		<xs:annotation>
			<xs:documentation>
				This is the basic definition of a new type.
				Components must derive from an existing type 
				and optionally provide documentation.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"></xs:restriction>
	</xs:simpleType>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
		
	<xs:complexType name="fieldType">
		<xs:annotation>
			<xs:documentation>
				A field declares a new element 
			in the component being defined. 
			A field is synonymous with 
			the HDF4 SDS (Scientific Data Set) and 
			the HDF5 <emphasis>dataset</emphasis> terms.
			Contains:
				<itemizedlist>
					<listitem><para><code>attribute</code></para></listitem>
					<listitem><para><code>dimensions</code></para></listitem>
					<listitem><para><code>doc</code></para></listitem>
					<listitem><para><code>enumeration</code></para></listitem>
				</itemizedlist>
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="nx:basicComponent">
				<xs:sequence>
					<xs:element name="dimensions" type="nx:dimsType"
						minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>dimensions of a data element 
							in a NeXus file</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="attribute" type="nx:attributeType"
						minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>attributes of field</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="enumeration" type="nx:enumerationType"
						minOccurs="0">
						<xs:annotation>
							<xs:documentation>A field can specify which 
							values are to be used</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="units" type="nx:anyUnitsAttr">
					<xs:annotation>
						<xs:documentation>
							String describing the engineering units.
							The string should be appropriate for the value
							and should conform to the NeXus rules for units.
							Conformance is not validated at this time.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="signal" type="nx:NX_POSINT">
					<xs:annotation>
						<xs:documentation>
							Presence of the <code>signal</code> attribute means this field is an ordinate.
							
							Integer marking this field as plottable data (ordinates).
							The value indicates the priority of selection or interest.
							Some facilities only use <code>signal="1"</code>
							while others use <code>signal="2"</code> to indicate
							plottable data of secondary interest.
							Higher numbers are possible but not common
							and interpretation is not standard.
							
							A field with a <code>signal</code> attribute should not have an <code>axis</code> attribute.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="axes" type="nx:NX_CHAR">
					<xs:annotation>
						<xs:documentation>
							Presence of the <code>axes</code> attribute means this field is an ordinate.
							
							This attribute contains a 
							<!-- NOT white-space --> 
							comma or colon  <!-- TODO see design.xml: Section NeXus Data -->
							separated list
							of paths to the names of independent axes when plotting this field.
						</xs:documentation>
					</xs:annotation>
					<!-- TODO perhaps a restriction can be used here? -->
				</xs:attribute>
				<xs:attribute name="axis" type="nx:NX_POSINT">
					<xs:annotation>
						<xs:documentation xmlns="http://docbook.org/ns/docbook">
							<para>NOTE: Use of this attribute is discouraged.  It is for legacy support.
							You should use the axes attribute instead.</para>
							
							<para>Presence of the <code>axis</code> attribute means this field is an abcissa.</para>
							
							<para>The attribute value is an integer indicating this
							field as an axis that is part of the data set.
							The data set is a field with the attribute 
							<code>signal="1"</code> in the same group.
							The value can range from 1 up to the number of 
							independent axes (abcissae) in the data set.  </para>
							
							<para>A value of <code>axis="1</code>" indicates that this field 
							contains the data for the first independent axis.  
							For example, the X axis in an XY data set.</para>
							
							<para>A value of <code>axis="2"</code> indicates that this field 
							contains the data for the second independent axis.
							For example, the Y axis in a 2-D data set.</para>
							
							<para>A value of <code>axis="3"</code> indicates that this field 
							contains the data for the third independent axis.
							For example, the Z axis in a 3-D data set.</para>
							
							<para>A field with an "<code>axis</code>" attribute should not have a signal attribute.</para>
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="primary" type="nx:NX_POSINT">
					<xs:annotation>
						<xs:documentation>
							Integer indicating the priority of selection
							of this field for plotting (or visualization) as an axis.
							
							Presence of the "primary" attribute means this field is an abcissa.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="type" type="nx:NAPI" default="NX_CHAR">
					<xs:annotation>
						<xs:documentation>
							Defines the type of the element as allowed by the NAPI (NeXus Application Programmer Interface).
							See elsewhere for the complete list of allowed NAPI types.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="minOccurs" use="optional" default="0" type="nx:nonNegativeUnbounded">
					<xs:annotation>
						<xs:documentation>
							Defines the minimum number of times this element may be used.  Its 
							value is confined to zero or greater.  Must be less than or equal to
							the value for the "maxOccurs" attribute.
							A value of "unbounded" is allowed.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="maxOccurs" use="optional"  default="1" type="nx:nonNegativeUnbounded">
					<xs:annotation>
						<xs:documentation>
							Defines the maximum number of times this element may be used.  Its 
							value is confined to zero or greater.  Must be greater than or equal to
							the value for the "minOccurs" attribute.
							A value of "unbounded" is allowed.
						</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="attributeType">
		<xs:annotation>
			<xs:documentation>
				Any new group or field may expect or require some common attributes.
				Contains:
				<itemizedlist>
					<listitem><para><code>doc</code></para></listitem>
					<listitem><para><code>enumeration</code></para></listitem>
				</itemizedlist>
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="doc" type="nx:docType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>
						Description of this specification.
					</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="enumeration" type="nx:enumerationType"
				minOccurs="0">
				<xs:annotation>
					<xs:documentation>An enumeration specifies the values to be used.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" use="required" type="nx:validItemName">
			<xs:annotation>
				<xs:documentation>
					Unique identifier string (within the enclosing group) for this entity.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="nx:primitiveType" default="NX_CHAR">
			<xs:annotation>
				<xs:documentation>
					For <code>group</code> specifications, the class name.
					For <code>field</code> or <code>attribute</code> specifications, 
					the NXDL data type.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>

	<xs:simpleType name="nonNegativeUnbounded">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				A <code>nonNegativeUnbounded</code> allows values including 
				all positive integers, zero, and the string <code>unbounded</code>.
			</xs:documentation>
		</xs:annotation>
		<xs:union>
			<xs:simpleType>
				<xs:restriction base="xs:nonNegativeInteger"/>
			</xs:simpleType>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="unbounded" />
				</xs:restriction>
			</xs:simpleType>
		</xs:union>
	</xs:simpleType>

	<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
	
	<xs:complexType name="linkType">
		<xs:annotation>
			<xs:documentation>A link to another item.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="nx:basicComponent">
				<xs:attribute name="target" use="required" type="nx:validTargetName">
					<xs:annotation>
						<xs:documentation>
							absolute path to element target
							Contains:
							<itemizedlist>
								<listitem><para><code>doc</code></para></listitem>
							</itemizedlist>
						</xs:documentation>
					</xs:annotation>					
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	
	<xs:complexType name="docType" mixed="true">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				NXDL allows for documentation on most elements using the <code>doc</code>
				element. The documentation is useful in several contexts. The documentation will be
				rendered in the manual. Documentation, is provided as tooltips 
				by some XML editors when editing NXDL files.
				Simple documentation can be typed directly in the NXDL: <example>
					<title>simple documentation in NXDL</title>
					<programlisting language="xml" linenumbering="numbered">
&lt;field name="name">
	&lt;doc>Descriptive name of sample&lt;/doc>
&lt;/field>					</programlisting>
				</example> This is suitable for basic descriptions that do not need extra formatting
				such as a bullet-list or a table. For more advanced control, DocBook elements are
				allowed, such as the <code>NXdetector</code> specification.
				Refer to examples in the NeXus base class NXDL files such as <code>NXdata</code>.
				Be sure to use the DocBook namespace if the documentation will use any DocBook formatting elements:
				<code>xmlns="http://docbook.org/ns/docbook"</code>
				Contains:
				<itemizedlist>
					<listitem><para><emphasis>any</emphasis></para></listitem>
				</itemizedlist>
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="enumerationType">
		<xs:annotation>
			<xs:documentation>
				An enumeration restricts the values allowed for a specification.
				Each value is specified using an <code>enumItem</code>, such as:
				<code>enumItem="Ta"</code>.
				Contains:
				<itemizedlist>
					<listitem><para><code>doc</code></para></listitem>
					<listitem><para><code>enumItem</code></para></listitem>
				</itemizedlist>
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="item" type="nx:enumItemType" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="enumItemType">
		<xs:annotation>
			<xs:documentation xmlns="http://docbook.org/ns/docbook">
				Defines the value of one selection for an <code>enumeration</code> list.
				Each enumerated item must have a value (it cannot have an empty text node).
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="doc" type="nx:docType" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation xmlns="http://docbook.org/ns/docbook">
						Individual items can be documented 
						but enumeration documentation might not
						printed in the manual.
						Still OK to use DocBook elements.
						Be sure to use the DocBook namespace for any DocBook elements:
						<code>xmlns="http://docbook.org/ns/docbook"</code>
					</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="value" use="required">
			<xs:annotation>
				<xs:documentation xmlns="http://docbook.org/ns/docbook">
					The value of <code>value</code> of an <code>enumItem</code>
					is defined as an attribute rather than a name.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	
	<xs:complexType name="dimsType">
		<!-- ===================================================================== -->
		<!-- ====================== BEGIN MAJOR COMMENT ========================== -->
		<!-- ===================================================================== -->
		<!--
			Peter Peterson writes:
			Here is a model:
			<field name="data">
			<dimensions size="3"/>
			...
			</field><field name="time-of-flight">
			<dimensions size="1">
			<dim index="1" ref="data" refindex="3" incr="1"/>
			</dimensions>
			...
			</field>
			
			In old terms this would make data[i,j,k] and time-of-flight[k+1]. 
			We need to get to the stage where people do not
			need to read a manual to understand an existing NXDL.
			
			+++++++++++++++++++++++++++++++++++++
			then Freddie Akeroyd writes:
			I think we have three cases to consider here:
			(1) specifying an explicit value for a dimension
			(2) specifying a dimension to be the same size as that of an array
			already defined elsewhere (optionally +- a value)
			(3) specifying a dimension to be the same as a data value defined
			elsewhere (e.g. num_scan_points, optionally +- a value)
			
			For (1) how about
			
			<dim index="1" value="3" />
			
			For (2) how about
			
			<field name="data">
			<dimensions size="3">
			<dim index="1" label="num_time_channels"/>
			< !- - dimensions with no constraints or labels do not need to be mentioned - -  >
			</dimensions>
			</field>
			<field name="time_of_flight">
			<dimensions size="1">
			<dim index="1" ref="num_time_channels" incr="1"/>
			</dimensions>
			...
			</field>
			
			For (3) how about
			
			<field name="num_scan_points" type="NX_INT"
			label="nscanpt" />
			<field name="data">
			<dimensions size="3">
			<dim index="1" label="num_time_channels"/>
			<dim index="3" ref="nscanpt"/>		    
			</dimensions>
			</field>
			
			Notes on dim tag:
			
			use 1 for first element in a sequence, +- to indicate sequence direction
			(or we could use an attribute instead)
			
			<dim index="1">   ! refers to first index (fastest varying)
			<dim index="-1">  ! refers to last index (slowest varying)
			
			<dim label="i">   ! we should constrain labels to be unique within the
			file and thus could be referred to 
			from any location. This would mean that "i"
			could not be used everywhere as a label, 
			but forcing the use of better names like
			"num_time_channels" makes things clearer. In the 
			first instance by making label an xs:ID and
			ref an xs:IDREF we can enforce "something" in
			label="something" to always be unique and "some_ref" in ref="some_ref"
			to always point to a 
			valid "label" (We may later want to use xs:key
			/ xs:keyref to do this if we needed a second
			set of unique labels for another purpose)
			
			+++++++++++++++++++++++++++++++++++++
			then Mark Koennecke writes:
			I think the dimensions encoding is tightly integrated with the algorithm we
			use to validate them later on. I thought about something like:
			
			<dimensions size="3">
			<dim level="0" value="25"/>
			<dim level="1" value="np"/>
			<dim level="2" path="/entry/blablabla/somefield" dim="0"/>
			</dimensions>
			The first case is trivial: validate against a number
			
			The general idea is that the dimensions validator would initialise np 
			the first place it comes up against it and
			checks against the value ever after. We must allow expressions like np+1 
			here.
			
			The third syntax is to explicitly address a specific dimension of 
			another variable.
			
		-->
		
		<!-- ===================================================================== -->
		<!-- ======================= END MAJOR COMMENT =========================== -->
		<!-- ===================================================================== -->
		<xs:annotation>
			<xs:documentation>dimensions of a data element in a NeXus file</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="dim" minOccurs="0" maxOccurs="unbounded">
				<xs:complexType>
					<xs:attribute name="index" type="nx:NX_CHAR">
						<xs:annotation>
							<xs:documentation>Number indicating which axis (subscript) is 
								being described, ranging from 1 up to <code>rank</code> (rank of the 
								data structure).  For example, given an array 
								<code>A[i,j,k]</code>, 
								<code>index="1"</code> would refer to the <code>i</code> axis (subscript).</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="value" type="nx:NX_CHAR">
						<xs:annotation>
							<xs:documentation>Length (number of values) of this axis.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="ref" type="nx:NX_CHAR">
						<xs:annotation>
							<xs:documentation>The dimension specification is the same as 
								that in the <code>ref</code> field, specified either by a relative path, 
								such as <code>polar_angle</code> or <code>../Qvec</code> or absolute path, such as
								<code>/entry/path/to/follow/to/ref/field</code>.
							</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="refindex" type="nx:NX_CHAR">
						<xs:annotation>
							<xs:documentation>The dimension specification is the same as 
								the <code>refindex</code> axis within the <code>ref</code> field.
								Requires <code>ref</code> attribute to be present.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="incr" type="nx:NX_CHAR">
						<xs:annotation>
							<xs:documentation>The dimension specification is related to
								the <code>refindex</code> axis within the <code>ref</code> field by an 
								offset of <code>incr</code>.  Requires <code>ref</code> and <code>refindex</code>
								attributes to be present.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="rank" type="nx:NX_CHAR">
			<xs:annotation>
				<xs:documentation>Rank (number of dimensions) of the data structure.  
					For example: <code>a[5]</code> has <code>rank="1"</code> while 
					<code>b[8,5,6,4]</code> has <code>rank="4"</code>.  
					See <code>http://en.wikipedia.org/wiki/Rank_(computer_programming)</code> 
					for more details.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	
</xs:schema>
