<?xml version="1.0" encoding="UTF-8"?>
<!--
	NXimage_exchange
		An image_exchange common exchange format
		written in the NeXus Definition Language
		based on a proposal from Chris Jacobsen.
-->
<definition name="NXimage_exchange" extends="NXobject" type="group" category="contributed"
  xmlns="http://definition.nexusformat.org/nxdl/3.1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://definition.nexusformat.org/nxdl/3.1 ../nxdl.xsd" version="1.0b"
  svnid="$Id$">
  <doc>
    <para> Minimal format for exchange of images. Start with something simple and immediately
      achievable: the exchange of multidimensional arrays between data analysis programs, rather
      than storage of all relevant information from all relevant beamlines. </para>
  </doc>

  <group type="NXentry" name="entry">
    <group type="NXdata">
	  <doc>NeXus uses the NXData group to identify the default information to 
	    plot.  NXentry and NXdata are the only two required groups in a NeXus 
		data file.</doc>
      <field name="image" type="NX_NUMBER">
        <doc>
          <para  xmlns="http://docbook.org/ns/docbook">
          NeXus link to the actual image to show by default. Something such as
            <code>/NXentry/image_exchange:NXnote/image</code></para>
        </doc>
      </field>
    </group>

    <group type="NXnote" name="image_exchange">
      <doc> 
        <para  xmlns="http://docbook.org/ns/docbook">
        All the information of the <emph>image_exchange</emph> format is contained in the
          <code>image_exchange:NXnote</code> group. We recognize this is different than 
        the standard NeXus categorization.  The plan here is to remain compatible with
        the rules of NeXus data files but to also make access to read and write
        the information as simple as possible.</para>
      </doc>
      <attribute name="version" type="NX_CHAR">
        <doc>Version string of this file format.</doc>
        <!--  Is this optional? Should be.  -->
      </attribute>

      <field name="dimensions" type="NX_INT">
        <doc> Integer array that holds the dimensions of each of the indices. That is, a set of
          640x480 pixel images over 120 different energies or wavelengths will have
          dimensions[]=[640,480,120]. </doc>
        <attribute name="rank" type="NX_INT">
          <doc>
            <para xmlns="http://docbook.org/ns/docbook">
              (Also known as <code>n_dimensions</code>) Integer that identifies the rank of "image".
              For <code>rank="1"</code>, "image" might be a spectrum.
              For <code>rank="2"</code>, "image" might be a 2-D image.
              For <code>rank="3"</code>, "image" might be a sequence of images or a volume.
              For <code>rank="4"</code>, "image" might be a hyperdimensional structure such as
              a sequence of volumes over time or energy or a 3D array of complex numbers.
              It is conceivable for "rank" to be greater than 4.
            </para>
            <para xmlns="http://docbook.org/ns/docbook">
              By reading "rank", you know how many elements to allocate for the integer
              array dimensions. Note that like with all HDF5 variables, the writing program can decided
              whether this is an 8 bit integer, or a 32 bit little-endian integer, or so on; and the
              reading program can find out how the variable was written to the file and then upon
              reading convert it to whatever integer type the reading program wants to use. 32 bit
              integers are suggested but not required.
            </para>
          </doc>
        </attribute>
      </field>

      <field name="image" type="NX_NUMBER">
        <doc>
          <para xmlns="http://docbook.org/ns/docbook"> 1D array that holds the image specified by
              <code>dimensions[]</code> (for the example of 640x480 images over 120 photon energies,
              <code>image[]</code> will be a 1D array with 640x480x120=36,864,000 values). The
            ordering scheme is to go from the “fast” on down to the slower index. That is, a 2D
            array on an X-Y grid is stored as <code>[ix=0,iy=0], [ix=1,iy=0], …, [ix=(nx-1),iy=0],
              [ix=0,iy=1]</code> and so on. Note that because HDF5 records the type of the data
            (float, 16 bit integer, etc.), the reading program should be able to handle reading any
            of these data types. </para>
        </doc>
      </field>

      <!-- +++++++++++++++ optional items +++++++++++++++++++++++++++ -->

      <field name="complex_index" type="NX_INT" minOccurs="0" maxOccurs="1">
        <doc>tells what dimension holds {real,imaginary} pairs for complex numbers (dimensioning is
          assumed to start at 0). If absent, or if &lt;0 or >(rank-1), it is assumed that
          the array is pure real. For a 640x480 complex array, one might have rank=3,
          complex_index=0, and dimensions[]=[2,640,480].</doc>
      </field>

      <!-- default type is NX_CHAR (any string representation) -->

      <field name="image_type" minOccurs="0" maxOccurs="1">
        <doc>short name for the type of data collected (must be selected from the enumerated
          list)</doc>
        <enumeration>
          <item value="transmission">
            <doc>transmission (units unspecified)</doc>
          </item>
          <item value="optical_density">
            <doc> (absorbance with 1 meaning the transmittance was reduced by e-1)</doc>
          </item>
          <item value="fluorescence"/>
          <item value="energy_loss"/>
          <item value="photoelectrons"/>
          <item value="diffraction_intensity"/>
          <item value="refractive_index"/>
          <item value="coherent diffraction imaging">
            <doc>In coherent diffraction imaging, the reconstructed image voxel values might be
              listed as complex values of transmission or of refractive_index.</doc>
          </item>
        </enumeration>
      </field>

      <field name="position_names" minOccurs="0" maxOccurs="1">
        <doc>
          String containing the names of each positioner in the "positions" field.
          A newline character (0x10, ^D, \n) is used as a delimiter.
        </doc>
      </field>
      <field name="position_units" minOccurs="0" maxOccurs="1">
        <doc>
          String containing the engineering units of each positioner in the "positions" field.
          A newline character (0x10, ^D, \n) is used as a delimiter.
        </doc>
      </field>

      <field name="positions" type="NX_NUMBER" minOccurs="0" maxOccurs="1">
        <doc>
          <para xmlns="http://docbook.org/ns/docbook">arrays containing the center position of each array point along each
            dimension.</para>
          <para xmlns="http://docbook.org/ns/docbook">Consider the example of a set of 800x600 pixel images acquired over 150 energy
            loss channels in electron energy loss spectrum imaging. We have rank=3,
            dimensions=[800,600,150], position_names[]={X,Y,Energy loss},
            position_units[]={microns,microns,ev}, and positions[]={800 X positions in microns, 600
            Y positions in microns, and 150 energy values in eV}. That is, we assume for data
            exchange purposes that all arrays are remapped onto regular grids (no variation of X
            positions from row to row). The allowed values for position_names[] are ev (energy in
            electron volts), microns (positions in micrometers), radians (angles), and seconds
            (time). Note that for complex arrays the values of position_names[complex_index],
            position_units[complex_index], and positions[]={…, 2 values for real and imagingary, …}
            are ignored.</para>
        </doc>
      </field>

      <field name="specimen_names" minOccurs="0" maxOccurs="1">
        <doc>
          Strings describing the specimen(s).
            A newline character (0x10, ^D, \n) is used as a delimiter. 
        </doc>
      </field>

      <field name="instrument_names" minOccurs="0" maxOccurs="1">
        <doc>Strings describing the instrument used to acquire the data.
          A newline character (0x10, ^D, \n) is used as a delimiter. 
        </doc>
      </field>

      <field name="experimenter_names" minOccurs="0" maxOccurs="1">
        <doc>Strings describing the people involved in preparing and acquiring the experimental data.
            A newline character (0x10, ^D, \n) is used as a delimiter.  
        </doc>
      </field>

      <field name="original_filenames" minOccurs="0" maxOccurs="1">
        <doc>Strings holding the names of the original data files into which the data was recorded.
          A newline character (0x10, ^D, \n) is used as a delimiter. </doc>
      </field>

      <field name="collection_timestamp" minOccurs="0" maxOccurs="1" type="NX_DATE_TIME">
        <doc>
          String to document the time at which the original data was recorded (ISO8601 format).
          The standard allows for time zone information and fractional times such as this entry:
          <literal>1996-07-31 21:15:22.012345+0600</literal>.
        </doc>
      </field>

      <field name="comments" minOccurs="0" maxOccurs="1">
        <doc>Strings recording any other notes regarding the specimen or experiment.
          A newline character (0x10, ^D, \n) is used as a delimiter. </doc>
      </field>

      <field name="processing_information" minOccurs="0" maxOccurs="1">
        <doc>Strings recording information on how the data was processed (what program was used,
          what parameter settings were employed, and so on).
          A newline character (0x10, ^D, \n) is used as a delimiter. </doc>
      </field>
    </group>

  </group>

</definition>
