<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<!-- # $Id$ -->
<section  xml:id="Example-H5py" 
  xreflabel="Complete h5py Example"
  xmlns="http://docbook.org/ns/docbook" 
  version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Python Examples using <code>h5py</code></title>
  
  <para>One way to gain a quick familiarity with NeXus is to start working with some data. For at least the
    first few examples in this section, we have a simple two-column set of 1-D data, collected as part of a 
    series of alignment scans by the APS USAXS instrument during the time it was stationed at 
    beam line 32ID. We will show how to write this 
    data using the Python language and the <code>h5py</code> package<footnote>
      <para><code>h5py</code>: <link xlink:href="http://code.google.com/p/h5py"
        ><code>http://code.google.com/p/h5py</code></link></para>
    </footnote>
    <indexterm>
      <primary>h5py</primary>
    </indexterm> (using <code>h5py</code> calls directly rather than using the NeXus NAPI). The
    actual data to be written was extracted (elsewhere) from a <code>spec</code><footnote>
      <para><code>SPEC</code>: <link xlink:href="http://certif.com/spec.html"
        ><code>http://certif.com/spec.html</code></link></para>
    </footnote> data file and read as a text block from a file by the Python source code. 
    Our examples will start with the simplest case and add only mild complexity with each new case
    since these examples are meant for those who are unfamiliar with NeXus.</para>
  
  <para>The data shown in <xref linkend="Example-H5py-Data"/> will be written to the NeXus HDF5 file
    using the only two required NeXus objects <code>NXentry</code> and <code>NXdata</code> in the first example
    and then minor variations on this structure in the next two examples.  The
    data model is identical to the one in the <link xlink:href="#fig.simple-example">Introduction to
      Volume I</link>) except that the names will be different, as shown below:
    <table role="small" xml:id="table.Example-H5py-DataModel">
      <title>
        NeXus Data Model
      </title>
      <tgroup cols="2" align="center" colsep="1" rowsep="1">
        <thead>
          <row>
            <entry><?dblatex bgcolor="[gray]{0.8}"?>our h5py example</entry>
            <entry><?dblatex bgcolor="[gray]{0.8}"?>from Introduction</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <programlisting linenumbering="numbered"
                   ><xi:include href="examples/h5py/data-model.txt" parse="text"
                   /></programlisting>
            </entry>
            <entry>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="img/Simple.png" width="250pt" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </para>
  
  <figure xml:id="Example-H5py-Plot" xreflabel="standard plot of our mr_scan data">
    <title>plot of our <emphasis>mr_scan</emphasis></title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="examples/h5py/s00008.png" width="300pt" scalefit="1"/>
      </imageobject>
    </mediaobject>
  </figure>
  <example xml:id="Example-H5py-Data">
    <title>two-column data for our <emphasis>mr_scan</emphasis></title>
    <programlisting linenumbering="numbered"
          ><xi:include href="examples/h5py/input.dat" parse="text"
          /></programlisting>
  </example>
  
  <xi:include href="writer_1_3.xml"/>
  <xi:include href="writer_2_1.xml"/>
  
  <section  xml:id="Example-H5py-complete"  xreflabel="Complete h5py Example">
    <title>A complete example of writing and reading a NeXus data file using <code>h5py</code></title>
    
    <section xml:id="Example-H5py-Writing">
      <title>Writing the HDF5 file</title>
      <para>In the main code section of <link xlink:href="#Example-H5py-BasicWriter"
        ><code>BasicWriter.py</code></link>, a current time stamp
        is written in the format of <emphasis>ISO 8601</emphasis>.
        For simplicity of this code example, we use a text string for the time, rather than 
        computing it directly from Python support library calls.  It is easier this way to 
        see the exact type of string formatting for the time.  When using the Python
        <code>datatime</code> package, one way to write the time stamp is:
        <programlisting language="python" linenumbering="numbered"
           >timestamp = "T".join( str( datetime.datetime.now() ).split() )</programlisting>
      </para>
      <para>The data (<code>mr</code> is similar to "two_theta" and
        <code>I00</code> is similar to "counts") is collated into two Python lists. We use our <code>my_lib</code>
        support to read the file and parse the two-column format. </para>
      <para>The new HDF5 file is opened (and created if not already existing) for writing,
        setting common NeXus attributes in the same command from our support library.
        Proper HDF5+NeXus groups are created for <code>/entry:NXentry/mr_scan:NXdata</code>. 
        Since we are not using the NAPI, our
        support library must create and set the <code>NX_class</code> attribute on each group. <note>
          <para> We want to create the desired structure of
            <code>/entry:NXentry/mr_scan:NXdata/</code>. First, our support library calls <code>nxentry =
              f.create_group("entry")</code> to create the <code>NXentry</code> group called
            <code>entry</code> at the root level. Then, it calls <code>nxdata =
              nxentry.create_group("mr_scan")</code> to create the <code>NXentry</code> group called
            <code>entry</code> as a child of the <code>NXentry</code> group. </para>
        </note>
      </para>
      <para>Next, we create a dataset called <code>title</code> to hold a title string that can 
        appear on the default plot.</para>
      <para>Next, we create datasets for <code>mr</code> and <code>I00</code> using our support library.
        The data type of each, as represented in <code>numpy</code>, will be recognized by 
        <code>h5py</code> and automatically converted to the proper HDF5 type in the file.
        A Python dictionary of attributes is given, specifying the engineering units and other
        values needed by NeXus to provide a default plot of this data.  By setting <code>signal="1"</code>
        as an attribute on <code>I00</code>, NeXus recognizes <code>I00</code> as the default 
        <emphasis>y</emphasis> axis for the plot.  The <code>axes="mr"</code> connects the dataset 
        to be used as the <emphasis>x</emphasis> axis.</para>
      <para> Finally, we <emphasis>must</emphasis> remember to call <code>f.close()</code> or we might
        corrupt the file when the program quits. </para>
      
      <example xml:id="Example-H5py-BasicWriter" xreflabel="Write a NeXus HDF5 file using Python with h5py">
        <title><citetitle>BasicWriter.py</citetitle>: Write a NeXus HDF5 file using Python with h5py</title>
        <programlisting language="python" linenumbering="numbered"
           ><xi:include href="examples/h5py/BasicWriter.py" parse="text"
           /></programlisting>
      </example>
    </section>
    
    <section xml:id="Example-H5py-Reading">
      <title>Reading the HDF5 file</title>
      
      <para> The file reader, <link xlink:href="#Example-H5py-Reader"
        ><code>BasicReader.py</code></link>, 
        is very simple since the bulk of the work is done by <code>h5py</code>.
        Our code opens the HDF5 we wrote above, 
        prints the HDF5 attributes from the file, 
        reads the two datasets, 
        and then prints them out as columns. 
        As simple as that.
        Of course, real code might add some error-handling and 
        extracting other useful stuff from the file. 
      </para> 
      <note>
        <para> See that we identified each of the two datasets using HDF5 absolute path references
          (just using the group and dataset names). Also, while coding this example, we were reminded
          that HDF5 is sensitive to upper or lowercase. That is, <code>I00</code> is not the same is
          <code>i00</code>. </para>
      </note>
      
      <example xml:id="Example-H5py-Reader" xreflabel="Read a NeXus HDF5 file using Python with h5py">
        <title><citetitle>BasicReader.py</citetitle>: Read a NeXus HDF5 file using Python with h5py</title>
        <programlisting language="python" linenumbering="numbered"
           ><xi:include href="examples/h5py/BasicReader.py" parse="text"
           /></programlisting>
      </example>
      <para>Output from <code>BasicReader.py</code> is shown in <xref
        linkend="Example-H5py-Output"/>. </para>
      
      <example xml:id="Example-H5py-Output">
        <title>Output from <code>BasicReader.py</code></title>
        <programlisting linenumbering="numbered"
           ><xi:include href="examples/h5py/output.txt" parse="text"
           /></programlisting>
      </example>
    </section>
    
    <section xml:id="Example-H5py-Validation">
      <title>Validating the HDF5 file</title>
      <para>
        Now we have an HDF5 file that contains our data.  What makes
        this different from a NeXus data file?  A NeXus file
        has a specific arrangement of groups and datasets
        in an HDF5 file.
      </para>
      <para>
        To test that our HDF5 file conforms to the NeXus standard,
        we use the <xref linkend="NXvalidate-java"/>
        program.  Referring to the next figure,
        we compare our HDF5 file with the rules for
        generic<footnote><para>generic NeXus data files: NeXus data
          files for which no application-specific NXDL
          applies</para></footnote> data files
        (<code>all.nxdl.xml</code>).  The only items that have
        been flagged are the "non-standard field names"
        <emphasis>mr</emphasis> and
        <emphasis>I00</emphasis>.  Neither of these two names is
        specifically named in the NeXus NXDL definition for
        the <code>NXdata</code> base class.  As we'll see shortly, 
        this is not a problem.
      </para>
      <figure xml:id="fig-Example-H5py-Validation">
        <title>NeXus validation of our HDF5 file</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="examples/h5py/nxvalidate.png" width="300pt" scalefit="1"/>
          </imageobject>
        </mediaobject>
      </figure>
      <note><para>Note that <code>NXvalidate</code> shows
        only the first data field for <emphasis>mr</emphasis> and
        <emphasis>I00</emphasis>.</para></note>
    </section>
    
    <section xml:id="Example-H5py-Plotting">
      <title>Plotting the HDF5 file</title>
      <para>
        Now that we are certain our file conforms to the NeXus
        standard, let's plot it using the <code>NeXpy</code><footnote><para><code>NeXpy</code>:
          <link 
          xlink:href="http://trac.mcs.anl.gov/projects/nexpy"><code
            >http://trac.mcs.anl.gov/projects/nexpy</code ></link></para></footnote>
        client tool.  To help label the plot, we added the
        <code>long_name</code> attributes to each of our datasets.
        We also added metadata to the root level of our HDF5 file
        similar to that written by the NAPI.  It seemed to be a useful addition.
        Compare this with 
        <xref linkend="Example-H5py-Plot"/>
        and note that the horizontal axis of this plot is mirrored from that above.
        This is because the data is stored in the file in descending
        <code>mr</code> order and <code>NeXpy</code> has plotted
        it that way by default.
      </para>
      <figure xml:id="fig-Example-H5py-nexpy-plot">
        <title>plot of our <emphasis>mr_scan</emphasis> using NeXpy</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="examples/h5py/nexpy.png" width="300pt" scalefit="1"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  
  <section xml:id="h5py-example-helpers" xreflabel="Python Helper Modules for h5py Examples">
    <title>Python Helper Modules for h5py Examples</title>
    <para>Two additional Python modules were used to describe these <code>h5py</code> examples.
      The source code for each is given here.  The first is a library we wrote that helps us 
      create standard NeXus components using <code>h5py</code>.  The second is a tool that helps
      us inspect the content and structure of HDF5 files.</para>
    
    <section xml:id="h5py-example-my_lib" xreflabel="mylib support module">
      <title>mylib support module</title>
      <para>The examples in this section make use of
        a small helper library that calls <code>h5py</code> to create the
        various NeXus data components of 
        <xref linkend="Design-Groups"/>,
        <xref linkend="Design-Fields"/>, 
        <xref linkend="Design-Attributes"/>, and
        <xref linkend="Design-Links"/>.
        In a smaller sense, this subroutine library (<code>my_lib</code>) fills the role of the NAPI for writing
        the data using h5py.</para>
      <programlisting linenumbering="numbered" language="python"
                ><xi:include href="examples/h5py/my_lib.py" parse="text"
                /></programlisting>
    </section>

    <section xml:id="h5py-example-h5toText" xreflabel="h5toText support module">
      <title>h5toText support module</title>
      <para>The module <code>h5toText</code> reads an HDF5 data file and prints out the
          structure of the groups, datasets, attributes, and links in that file.
          There is a command-line option to print out more or less of the data
          in the dataset arrays.</para>
      <programlisting linenumbering="numbered" language="python"
                ><xi:include href="examples/h5py/h5toText.py" parse="text"
                /></programlisting>
    </section>
  </section>
  

</section>
